[
  {
    "utterance number": 1,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Thanks",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 2,
        "text": " Yeah, so my name is Asumu",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I work at Igalia and I am presenting with DRR and other people who have helped out with this presentation that\u2019s listed below",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 4,
        "text": " We\u2019re here to give an update on the proposal, not asking for stage advancement",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " The primary topic will be addressing feedback that was brought up before",
        "polarity": 0.4,
        "subjectivity": 0.5
      },
      {
        "sentence number": 6,
        "text": " First I\u2019ll go over the proposal context and history",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 7,
        "text": " The type annotations proposal got to stage 1 in March of 2022",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " And just to recap, the motivations for the proposal are static types are widely used in the JavaScript community these days and most can\u2019t be directly run by web engines",
        "polarity": 0.25,
        "subjectivity": 0.55
      },
      {
        "sentence number": 9,
        "text": " So we\u2019d like to improve the ergonomics of using types by allowing engines to process typed JavaScript code",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " So we can summarize this with main goal of unifying JavaScript with typed scripts",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 11,
        "text": " This is another slide showing static types is still popular",
        "polarity": 0.55,
        "subjectivity": 0.9
      },
      {
        "sentence number": 12,
        "text": " This is from state of JS survey a couple months ago that shows that static types is still one of the top requested features",
        "polarity": 0.5,
        "subjectivity": 0.7
      },
      {
        "sentence number": 13,
        "text": " The last time this was brought up to committee, there was this initial presentation focusing on erased semantics for the types so the type would be ignored by engines, just parsed",
        "polarity": 0.0,
        "subjectivity": 0.03333333333333333
      },
      {
        "sentence number": 14,
        "text": " We heard some feedback that we should also investigate run-time type checking, so the types would have run-time checking",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": " So this will be main topic of the presentation after we give updates",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 16,
        "text": " I want to emphasize that we would like to focus the discussion on this topic",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 17,
        "text": " So if people with keep that in mind for the discussion, that would be great",
        "polarity": 0.8,
        "subjectivity": 0.75
      },
      {
        "sentence number": 18,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.29166666666666663,
    "subjectivity": 0.48774509803921573,
    "keywords": [
      [
        "types",
        0.06647396424326003
      ],
      [
        "static types",
        0.08613662988525576
      ],
      [
        "proposal",
        0.10938516330317506
      ],
      [
        "type",
        0.13294792848652007
      ],
      [
        "static",
        0.17161803445428334
      ],
      [
        "JavaScript",
        0.18128490802159444
      ],
      [
        "engines",
        0.18128490802159444
      ],
      [
        "work at Igalia",
        0.18430671474530905
      ],
      [
        "presenting with DRR",
        0.18430671474530905
      ],
      [
        "presentation",
        0.19197695005541676
      ]
    ]
  },
  {
    "utterance number": 2,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so that\u2019s the brief history and summary",
        "polarity": 0.0,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 2,
        "text": " We\u2019ll talk a little bit about things we\u2019ve been working on for the initial proposal",
        "polarity": -0.09375,
        "subjectivity": 0.25
      },
      {
        "sentence number": 3,
        "text": " There was a tentative grammar for the types and text that was included in the proposal repo and you can see a link for that below",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " I\u2019ve put a screenshot in that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " You\u2019re not expected to be able to read that, just to show it\u2019s a thing",
        "polarity": 0.275,
        "subjectivity": 0.5125
      },
      {
        "sentence number": 6,
        "text": " The goal was to accommodate existing type syntaxes and in existing types in TypeScript, Flow, etc",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " while leaving room for forward compatibility",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " I just want to go through some examples to show a bit about this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " Before the examples, recently we\u2019ve been also working on refining this proposal, so we\u2019re identifying how to extend the tentative grammar to meet the types that are in the tentative systems that are listed there",
        "polarity": 0.0,
        "subjectivity": 0.25
      },
      {
        "sentence number": 10,
        "text": " We\u2019ve been putting forward a syntax comparison table that we plan to add and that\u2019s linked at the bottom there",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": " Some tentative conclusions we reached are that the current grammar supports a lot of the constructs we looked at actually but there are a few cases where we would need to expand the syntax and I\u2019ll give some examples",
        "polarity": -0.06666666666666667,
        "subjectivity": 0.19999999999999998
      },
      {
        "sentence number": 12,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.018055555555555554,
    "subjectivity": 0.30092592592592593,
    "keywords": [
      [
        "history and summary",
        0.0313547305170295
      ],
      [
        "\u2019ve",
        0.09257210762303299
      ],
      [
        "tentative",
        0.11705848615841644
      ],
      [
        "proposal",
        0.1266242090171054
      ],
      [
        "types",
        0.14143901770017087
      ],
      [
        "tentative grammar",
        0.15387629143723494
      ],
      [
        "summary",
        0.16470724205249496
      ],
      [
        "grammar",
        0.1675297616675075
      ],
      [
        "history",
        0.18457901005554858
      ],
      [
        "initial proposal",
        0.2007649848321319
      ]
    ]
  },
  {
    "utterance number": 3,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " But first in terms of forward compatibility is designed in a way that it supports things that are not explicitly encoded in the grammar",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 2,
        "text": " There are angle brackets or square brackets or curly braces, the tentative grammar will ignore tokens between these brackets so that lets you to support exact type, which is curly brace and vertical bar sytax that\u2019s there or flows read-only properties that\u2019s the plus modifier on the key",
        "polarity": 0.125,
        "subjectivity": 0.625
      },
      {
        "sentence number": 3,
        "text": " Or things like typed parameter variance annotations, which is the bottom example",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.16666666666666666,
    "subjectivity": 0.5277777777777778,
    "keywords": [
      [
        "terms of forward",
        0.028611013725815232
      ],
      [
        "forward compatibility",
        0.028611013725815232
      ],
      [
        "compatibility is designed",
        0.028611013725815232
      ],
      [
        "explicitly encoded",
        0.028611013725815232
      ],
      [
        "support exact type",
        0.054085735855366794
      ],
      [
        "vertical bar sytax",
        0.10888107631064707
      ],
      [
        "flows read-only properties",
        0.10888107631064707
      ],
      [
        "supports things",
        0.11556268622782305
      ],
      [
        "brackets",
        0.12799232715150455
      ],
      [
        "tentative grammar",
        0.13175540369996278
      ]
    ]
  },
  {
    "utterance number": 4,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So the bottom line here is that we\u2019re evolving the syntax based on the needs of multiple type systems that we\u2019re looking at",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " We want to ease any migration to whatever system we come up with and the overall goal is in service of trying to unify JavaScript",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "multiple type systems",
        0.007075845852563094
      ],
      [
        "\u2019re evolving",
        0.020857020098688974
      ],
      [
        "bottom line",
        0.02371261095394405
      ],
      [
        "evolving the syntax",
        0.02371261095394405
      ],
      [
        "syntax based",
        0.02371261095394405
      ],
      [
        "multiple type",
        0.02371261095394405
      ],
      [
        "type systems",
        0.04394646830988657
      ],
      [
        "\u2019re",
        0.06712073182490466
      ],
      [
        "unify JavaScript",
        0.13126736564655972
      ],
      [
        "bottom",
        0.15219509685315077
      ]
    ]
  },
  {
    "utterance number": 5,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So on to the semantics, so there are two paths to adding type to JavaScript in terms of what the types mean",
        "polarity": -0.3125,
        "subjectivity": 0.6875
      },
      {
        "sentence number": 2,
        "text": " One is what the initial proposal that we bought last year is proposing, where types are erased and engines don\u2019t use them for anything",
        "polarity": 0.0,
        "subjectivity": 0.03333333333333333
      },
      {
        "sentence number": 3,
        "text": " And the alternative is that types are enforced at run-time, and they are interpreted as some kind of run-time check by the web engine",
        "polarity": 0.6,
        "subjectivity": 0.9
      },
      {
        "sentence number": 4,
        "text": " And this is what we heard feedback about last time that people wanted us to investigate whether this was something that could be done in this proposal",
        "polarity": 0.0,
        "subjectivity": 0.06666666666666667
      },
      {
        "sentence number": 5,
        "text": " So let\u2019s consider if this is feasible or desirable",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " And just to be clear, I\u2019m going to spoil the ending here",
        "polarity": 0.10000000000000002,
        "subjectivity": 0.3833333333333333
      },
      {
        "sentence number": 7,
        "text": " We the people who are working on this proposal don\u2019t consider this feasible, but we want to explain our reasoning in detail and why we think that\u2019s the case",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " Let me propose a rubric for trying to evaluate whether run time checks would match with this broader unifying JavaScript goal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " So we can break that into sub items",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " We want it to be easily migratable in the ecosystem",
        "polarity": 0.43333333333333335,
        "subjectivity": 0.8333333333333334
      },
      {
        "sentence number": 11,
        "text": " Many people already use types as mentioned earlier so we want them to migrate to whatever system",
        "polarity": 0.25,
        "subjectivity": 0.5
      },
      {
        "sentence number": 12,
        "text": " We want this to be extensible to support different systems people use",
        "polarity": 0.0,
        "subjectivity": 0.6
      },
      {
        "sentence number": 13,
        "text": " And this should also be practical for use",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 14,
        "text": " So these all fall into the \"unifying JS\" goal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.13208333333333333,
    "subjectivity": 0.45375000000000004,
    "keywords": [
      [
        "paths to adding",
        0.035356944351158555
      ],
      [
        "adding type",
        0.05929334408173139
      ],
      [
        "types",
        0.0757246714773667
      ],
      [
        "people",
        0.12702587559607492
      ],
      [
        "proposal",
        0.13429710318168742
      ],
      [
        "semantics",
        0.16490549634075083
      ],
      [
        "paths",
        0.18479589177189804
      ],
      [
        "adding",
        0.18479589177189804
      ],
      [
        "terms",
        0.18479589177189804
      ],
      [
        "JavaScript in terms",
        0.19443245715607158
      ]
    ]
  },
  {
    "utterance number": 6,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And the big question is are these goals in conflict with doing run time type checking as part of the annotations proposal",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 2,
        "text": " We argue they may be in conflict with these goals",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " If we consider run time check insertion may be surprising to existing users",
        "polarity": 0.7,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " And as to whether this supports different tools in the ecosystem, having these run time checks will require us to fix a particular type system semantics that we use to create these checks",
        "polarity": 0.08333333333333333,
        "subjectivity": 0.4666666666666667
      },
      {
        "sentence number": 5,
        "text": " Finally the question of whether it\u2019s practical",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 6,
        "text": " Turns out these checks can have high overheads in many cases",
        "polarity": 0.33,
        "subjectivity": 0.52
      },
      {
        "sentence number": 7,
        "text": " I think the examples will mostly focus on the last bullet, how practical it is in the performance overhead",
        "polarity": 0.25,
        "subjectivity": 0.2833333333333333
      },
      {
        "sentence number": 8,
        "text": " So that be the topic, about the challenges of run time type checking",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22518518518518515,
    "subjectivity": 0.45999999999999996,
    "keywords": [
      [
        "run time",
        0.03158557774774234
      ],
      [
        "run time type",
        0.034275500760710224
      ],
      [
        "annotations proposal",
        0.03710248428446409
      ],
      [
        "time type checking",
        0.05124324854616876
      ],
      [
        "run time check",
        0.0714654940820161
      ],
      [
        "time type",
        0.07386934628777675
      ],
      [
        "time",
        0.07558454224961818
      ],
      [
        "run",
        0.09275246235877295
      ],
      [
        "big question",
        0.10767975834036693
      ],
      [
        "conflict",
        0.11764240574046768
      ]
    ]
  },
  {
    "utterance number": 7,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So before I go into examples, let\u2019s set some assumptions on how these run-time checks would work so we have a shared understanding on how the examples work",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " The first assumption is compiler would insert run time checks",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 3,
        "text": " The second assumption I think maybe not everyone would agree with, but I have a slide for that later in the presentation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Let\u2019s assume that the inserted checks will do their best to uphold the guarantees",
        "polarity": 1.0,
        "subjectivity": 0.3
      },
      {
        "sentence number": 5,
        "text": " I\u2019m not going to talk about soundness for the rest of this talk for clarity, but that\u2019s what it corresponds to if you care about that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.3125,
    "subjectivity": 0.15833333333333333,
    "keywords": [
      [
        "shared understanding",
        0.03093855256213524
      ],
      [
        "run-time checks",
        0.06181145340909405
      ],
      [
        "work",
        0.07658732150102833
      ],
      [
        "checks",
        0.11201255141169464
      ],
      [
        "insert run time",
        0.12106926047727223
      ],
      [
        "time checks",
        0.1648764448534346
      ],
      [
        "assumption",
        0.16801882711754196
      ],
      [
        "set some assumptions",
        0.16849193627140413
      ],
      [
        "set",
        0.17323418831420062
      ],
      [
        "run-time",
        0.17323418831420062
      ]
    ]
  },
  {
    "utterance number": 8,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Here is a simple example",
        "polarity": 0.0,
        "subjectivity": 0.35714285714285715
      },
      {
        "sentence number": 2,
        "text": " Let\u2019s say we have function F and it has functions and we annotate the parameter X as having type number and Y having string",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " What would happen in this run time check scenario is that the compiler would insert a check for the number type on the X parameter, so when you call F it will do this type check",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " In this case it will produce an error because foo is not a number",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " For these first order types, the checks are very straightforward, there\u2019s nothing complicated going on",
        "polarity": 0.07916666666666668,
        "subjectivity": 0.6069444444444444
      },
      {
        "sentence number": 6,
        "text": " But it\u2019s well known that for in general, run-time type checks, they can introduce performance penalties and require better compilers and language design in order to accommodate them in a practical way",
        "polarity": 0.275,
        "subjectivity": 0.5
      },
      {
        "sentence number": 7,
        "text": " So there\u2019s a bunch of literature on this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " One of the most relevant things is \"Safe TypeScript\" which designs such a system for TypeScript and they did see performance overheads on examples",
        "polarity": 0.35,
        "subjectivity": 0.6
      },
      {
        "sentence number": 9,
        "text": " I can provide more details",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 10,
        "text": " There\u2019s also a bunch of academic work on run-time checks for this type of language that show that performance overheads can be quite high and depends on the details of how your system works, but it\u2019s especially hard for structural types, e",
        "polarity": -0.1411111111111111,
        "subjectivity": 0.5133333333333333
      },
      {
        "sentence number": 11,
        "text": "g",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": ", function types, object types, etc",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 13,
        "text": " One question that comes up a lot in this context is why can\u2019t we use these types to make the code faster in a way using optimizations",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 14,
        "text": " They would somehow offset whatever performance penalties we might get for run time checks",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": " It\u2019s unclear if engines can actually take advantage of these TypeScript or Flow-style checks and do optimizations that would compensates for the checks",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 16,
        "text": " We definitely welcome implementer feedback on this topic and generally on the topic of performance overheads",
        "polarity": 0.42500000000000004,
        "subjectivity": 0.7
      },
      {
        "sentence number": 17,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.18318627450980393,
    "subjectivity": 0.5363515406162465,
    "keywords": [
      [
        "checks",
        0.0967633270408043
      ],
      [
        "performance",
        0.11559709173995741
      ],
      [
        "type",
        0.11909425471925862
      ],
      [
        "types",
        0.11909425471925862
      ],
      [
        "number",
        0.1712953616809146
      ],
      [
        "performance overheads",
        0.18039979025157085
      ],
      [
        "check",
        0.1935266540816086
      ],
      [
        "overheads",
        0.20251644397014962
      ],
      [
        "TypeScript",
        0.22897723400627595
      ],
      [
        "parameter",
        0.25506083513532174
      ]
    ]
  },
  {
    "utterance number": 9,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Let me go into examples of why type checks can be difficult",
        "polarity": -0.5,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": " Here\u2019s a function `F`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " This time instead of taking number parameters",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " `O` has type object where there\u2019s a field `X` with type number",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " And so the compiler needs to insert some kind of check to check the structural type",
        "polarity": 0.6,
        "subjectivity": 0.9
      },
      {
        "sentence number": 6,
        "text": " So you might think, well, we can just put in a check that whatever object is passed for `O` has a field that\u2019s `X` and has a number, sure",
        "polarity": 0.5,
        "subjectivity": 0.8888888888888888
      },
      {
        "sentence number": 7,
        "text": " But the problem is that it\u2019s more complicated than that",
        "polarity": 0.0,
        "subjectivity": 0.75
      },
      {
        "sentence number": 8,
        "text": " Imagine if `F` in turn calls `G` and passes `O` to it, , and the function tries to mutate that",
        "polarity": -0.1,
        "subjectivity": 0.4
      },
      {
        "sentence number": 9,
        "text": " This initial check that you do on function entry is no longer valid and so you actually could still get a type error",
        "polarity": 0.0,
        "subjectivity": 0.05
      },
      {
        "sentence number": 10,
        "text": " So with this kind of thing you need to do checks in a lot more places, you need to rework the program in general to insert checks that either writes or reads some combination of those in order to make sure that mutation, for example, can\u2019t go unchecked in a way that will violate the type in variance in your program",
        "polarity": 0.41250000000000003,
        "subjectivity": 0.6972222222222222
      },
      {
        "sentence number": 11,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.1791666666666667,
    "subjectivity": 0.6314814814814814,
    "keywords": [
      [
        "type",
        0.09479676313631345
      ],
      [
        "check",
        0.1401807469900697
      ],
      [
        "number",
        0.1774000259487139
      ],
      [
        "checks",
        0.18690766265342623
      ],
      [
        "difficult",
        0.1965398240519237
      ],
      [
        "function",
        0.2064448140243841
      ],
      [
        "field",
        0.2774530737115257
      ],
      [
        "object",
        0.29700881287923653
      ],
      [
        "insert",
        0.3015644595966498
      ],
      [
        "kind",
        0.3015644595966498
      ]
    ]
  },
  {
    "utterance number": 10,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so one thing you might say is \u201cI don\u2019t care about mutation\u201d, you just want that simple check that it\u2019s an object with this field and that\u2019s fine",
        "polarity": 0.20833333333333334,
        "subjectivity": 0.4285714285714286
      },
      {
        "sentence number": 2,
        "text": " Well, that doesn\u2019t work when it come to things like function type",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Here function F takes a function parameter G instead and this has a function type that\u2019s number \u2192 number",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " And the issue here is that this type can\u2019t be trivially checked on entry to F like in this previous example where you could check some properties, not the object type",
        "polarity": -0.16666666666666666,
        "subjectivity": 0.16666666666666666
      },
      {
        "sentence number": 5,
        "text": " You can\u2019t check anything here on entry to F",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " You really do need to do some rewriting of the program in order to insert checks to verify that G will return, you know, the right type",
        "polarity": 0.24285714285714285,
        "subjectivity": 0.3678571428571429
      },
      {
        "sentence number": 7,
        "text": " And there are other implementation strategies you could take",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 8,
        "text": " Perhaps you do some tagging scheme, so ensure that functions are tagged with the right type, as Safe TypeScript did",
        "polarity": 0.39285714285714285,
        "subjectivity": 0.5178571428571428
      },
      {
        "sentence number": 9,
        "text": " So you might be able to do some type of check",
        "polarity": 0.5,
        "subjectivity": 0.625
      },
      {
        "sentence number": 10,
        "text": " But in general there are more run-time dynamics that you need to introduce",
        "polarity": 0.275,
        "subjectivity": 0.5
      },
      {
        "sentence number": 11,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22240259740259738,
    "subjectivity": 0.4359307359307359,
    "keywords": [
      [
        "care about mutation",
        0.05000577200906811
      ],
      [
        "type",
        0.07385427094030474
      ],
      [
        "function",
        0.10816676726200457
      ],
      [
        "n\u2019t",
        0.10905717791723626
      ],
      [
        "n\u2019t care",
        0.11345777980159569
      ],
      [
        "check",
        0.13628915621735918
      ],
      [
        "function type",
        0.14406444990316797
      ],
      [
        "simple check",
        0.14592271545363464
      ],
      [
        "mutation",
        0.2038835419923153
      ],
      [
        "fine",
        0.2038835419923153
      ]
    ]
  },
  {
    "utterance number": 11,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " It continues to get more complicated once you introduce more advanced features, whether it\u2019s control features and so on",
        "polarity": 0.225,
        "subjectivity": 0.65
      },
      {
        "sentence number": 2,
        "text": " So going back to this rubric that I was talking about, these examples are shows that there\u2019s a bunch of challenges here with this kind of approach",
        "polarity": 0.3,
        "subjectivity": 0.45
      },
      {
        "sentence number": 3,
        "text": " First of all, you saw in all these examples that we were translating the run-time checks from the types and the type haves a specific meaning that we have in mind",
        "polarity": 0.125,
        "subjectivity": 0.22916666666666666
      },
      {
        "sentence number": 4,
        "text": " It\u2019s unclear how we could allow flexibility for difference meanings of types to exist",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " For example, if you have Flow versus TypeScript, maybe there are different types that have same syntax, but different meaning",
        "polarity": 0.0,
        "subjectivity": 0.44166666666666665
      },
      {
        "sentence number": 6,
        "text": " It\u2019s unclear how you could cope with that meaning, but the other issue is people will use in practice have high overheads of checking, and it\u2019s a significant amount of work for implementers to make this practical",
        "polarity": 0.1366666666666667,
        "subjectivity": 0.5966666666666667
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.1542857142857143,
    "subjectivity": 0.5052380952380953,
    "keywords": [
      [
        "advanced features",
        0.034332215032946985
      ],
      [
        "control features",
        0.034332215032946985
      ],
      [
        "introduce more advanced",
        0.03804766918992725
      ],
      [
        "features",
        0.08668748381832525
      ],
      [
        "types",
        0.16913728109934528
      ],
      [
        "meaning",
        0.18239536234440834
      ],
      [
        "continues",
        0.19145000395307535
      ],
      [
        "complicated",
        0.19145000395307535
      ],
      [
        "introduce",
        0.19145000395307535
      ],
      [
        "advanced",
        0.19145000395307535
      ]
    ]
  },
  {
    "utterance number": 12,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So one thing that you might push back on is that you might say that, well, a lot of this problem comes from one of the assumptions that we\u2019ve made, that these checks will do their best to uphold the guarantees of a static type checker",
        "polarity": 0.5,
        "subjectivity": 0.39999999999999997
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.5,
    "subjectivity": 0.39999999999999997,
    "keywords": [
      [
        "static type checker",
        0.00045942001571077094
      ],
      [
        "\u2019ve made",
        0.005380746843605012
      ],
      [
        "type checker",
        0.005380746843605012
      ],
      [
        "push back",
        0.00717258304785508
      ],
      [
        "uphold the guarantees",
        0.00717258304785508
      ],
      [
        "static type",
        0.00717258304785508
      ],
      [
        "made",
        0.06341998722529081
      ],
      [
        "checker",
        0.06341998722529081
      ],
      [
        "thing",
        0.08438900089923473
      ],
      [
        "push",
        0.08438900089923473
      ]
    ]
  },
  {
    "utterance number": 13,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So if you do care about this, you really do want to uphold the type guarantees, then you\u2019ll need the structural types that were shown in the previous slides, and that comes with all these performance overheads",
        "polarity": 0.016666666666666677,
        "subjectivity": 0.18333333333333335
      },
      {
        "sentence number": 2,
        "text": " Let\u2019s suppose that you don\u2019t care about this aspect",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " You just want the simple checks",
        "polarity": 0.0,
        "subjectivity": 0.35714285714285715
      },
      {
        "sentence number": 4,
        "text": " You only care about the simple number or string checks that I mentioned in one of the earlier examples",
        "polarity": 0.0,
        "subjectivity": 0.6190476190476191
      },
      {
        "sentence number": 5,
        "text": " We think that if that\u2019s what you really care about, that\u2019s the kind of annotation that you really want, this would be handled by an entirely different kind of proposal that I\u2019ll talk a little bit about in the next section",
        "polarity": 0.2017857142857143,
        "subjectivity": 0.4714285714285714
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.11121794871794871,
    "subjectivity": 0.45238095238095244,
    "keywords": [
      [
        "type guarantees",
        0.01974716733370991
      ],
      [
        "structural types",
        0.023291443219364626
      ],
      [
        "previous slides",
        0.023645108148147683
      ],
      [
        "performance overheads",
        0.023645108148147683
      ],
      [
        "uphold the type",
        0.05530733065314427
      ],
      [
        "care",
        0.07196880690114349
      ],
      [
        "n\u2019t care",
        0.1325624097092733
      ],
      [
        "type",
        0.1381365907414374
      ],
      [
        "types",
        0.1381365907414374
      ],
      [
        "guarantees",
        0.14018565186324866
      ]
    ]
  },
  {
    "utterance number": 14,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So I think no matter which path you take on this assumption, either you\u2019ll run nto these performance issues and that\u2019s the reason for not wanting to do it in in the type annotation type proposal, or we should do it in other type of proposal that\u2019s not type annotations",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 2,
        "text": " I\u2019ll talk more about the alternative for run time checking for these simple checks that don\u2019ts try to uphold all the type guarantees that I was talking about",
        "polarity": 0.25,
        "subjectivity": 0.4285714285714286
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.125,
    "subjectivity": 0.41071428571428575,
    "keywords": [
      [
        "annotation type proposal",
        0.009375951162578796
      ],
      [
        "\u2019ll run nto",
        0.014528161159749711
      ],
      [
        "type annotation type",
        0.017788476990852984
      ],
      [
        "matter which path",
        0.02703226138088906
      ],
      [
        "nto these performance",
        0.02703226138088906
      ],
      [
        "performance issues",
        0.02703226138088906
      ],
      [
        "run nto",
        0.04709165378906252
      ],
      [
        "type annotation",
        0.04891327619116352
      ],
      [
        "annotation type",
        0.04891327619116352
      ],
      [
        "type proposal",
        0.06023152940350055
      ]
    ]
  },
  {
    "utterance number": 15,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " The key question here is: Why do want to couple run time checks with the type annotations proposal",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": " Is that the best way forward",
        "polarity": 1.0,
        "subjectivity": 0.3
      },
      {
        "sentence number": 3,
        "text": " So stepping back a bit, let\u2019s think about why would developers want these run time checks any way",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " We want convenience syntax for writing down checked program type behavior",
        "polarity": -0.15555555555555559,
        "subjectivity": 0.2888888888888889
      },
      {
        "sentence number": 5,
        "text": " But this doesn\u2019t have to be the exact same syntax as static types, because static types already have an established meaning in systems like TypeScript or Flow and developers already depend on these meanings and care about them, it could be really confusing if you wrote down things that are similar to TypeScript or Flow syntax but you got checks that have nothing to do with what those tools enforce",
        "polarity": 0.11349206349206349,
        "subjectivity": 0.4662698412698412
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.14898989898989898,
    "subjectivity": 0.44116161616161614,
    "keywords": [
      [
        "type annotations proposal",
        0.03658138661709522
      ],
      [
        "annotations proposal",
        0.04461041990629737
      ],
      [
        "couple run time",
        0.048719151838649666
      ],
      [
        "key question",
        0.06045569336305248
      ],
      [
        "run time checks",
        0.06913219060855909
      ],
      [
        "run time",
        0.0883190676183203
      ],
      [
        "couple run",
        0.11315374946375205
      ],
      [
        "time checks",
        0.11852695281927636
      ],
      [
        "TypeScript or Flow",
        0.16498055727497862
      ],
      [
        "time",
        0.17630722059114576
      ]
    ]
  },
  {
    "utterance number": 16,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Instead we think it would be more attractive to have extensions of existing proposals that could provide syntax that is pretty close to what you\u2019d want from run time checking",
        "polarity": 0.5166666666666667,
        "subjectivity": 0.8333333333333334
      },
      {
        "sentence number": 2,
        "text": " I have a concrete example here of a lightweight syntax for checks",
        "polarity": 0.15000000000000002,
        "subjectivity": 0.30000000000000004
      },
      {
        "sentence number": 3,
        "text": " Instead of writing down type annotations with colons, here we have this number call with \u2013 it\u2019s not a call, but a number thing with a primary X and then similarly string for Y",
        "polarity": 0.08148148148148147,
        "subjectivity": 0.39629629629629637
      },
      {
        "sentence number": 4,
        "text": " And what these are are actually extractor objects",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 5,
        "text": " So this is basically what the extrator proposal and the pattern-matching proposal, both of these are at Stage 1, would together provide",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " And this is effectively doing that simple lightweight check that I was talking about",
        "polarity": 0.3,
        "subjectivity": 0.5785714285714286
      },
      {
        "sentence number": 7,
        "text": " This inserts a check for X being a number, no complex compilation involved",
        "polarity": 0.15,
        "subjectivity": 0.4
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.24494949494949497,
    "subjectivity": 0.5132756132756132,
    "keywords": [
      [
        "run time checking",
        0.005816463019615864
      ],
      [
        "time checking",
        0.0294773668464378
      ],
      [
        "extensions of existing",
        0.03607598547650032
      ],
      [
        "pretty close",
        0.03607598547650032
      ],
      [
        "run time",
        0.03607598547650032
      ],
      [
        "existing proposals",
        0.09496052193473385
      ],
      [
        "syntax",
        0.14553439053619413
      ],
      [
        "checking",
        0.1534470647385436
      ],
      [
        "provide syntax",
        0.15629561361334404
      ],
      [
        "number",
        0.16953632543863356
      ]
    ]
  },
  {
    "utterance number": 17,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so I want to go through a bit about how the extrator\u2019s proposal works and how it provides protocol for doing this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Pattern matching specifies a custom matcher API and then defines a bunch of custom matchers for all the primitive class keys",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " In particular the number of primitive class gets a new property with the key symbol matcher that the proposal defines, which is a special custom matcher that matches and destructs numbers",
        "polarity": 0.16504329004329005,
        "subjectivity": 0.5898268398268398
      },
      {
        "sentence number": 4,
        "text": " And these custom matchers are used by both extractors and pattern matching to define distractor values",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " So if you have a custom matcher you can use them with the extrator proposal with special binding forms to match and distract values",
        "polarity": 0.35714285714285715,
        "subjectivity": 0.5714285714285714
      },
      {
        "sentence number": 6,
        "text": " In this first example you have `const number` and then name equals some expression",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 7,
        "text": " This is using an extractor object, that\u2019s the number thing to first match on whatever result is produced by this function producing numbers expression, checks that it\u2019s a number and then binds it to bound name",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 8,
        "text": " So you can \u2013 this is using it for a variable declaration, but you can use it in parameter function",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " You can also define your own extractor objects using this custom matcher protocol to implement arbitrary type texts",
        "polarity": 0.25,
        "subjectivity": 0.8
      },
      {
        "sentence number": 10,
        "text": " You can define this const MyType object with its matcher defined in the \"",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 13,
        "text": "\" in the code sample",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 14,
        "text": " And then can you use this my type name in function parameter position to basically act like a type",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22414622414622412,
    "subjectivity": 0.5774891774891775,
    "keywords": [
      [
        "custom matcher",
        0.05432428689945371
      ],
      [
        "custom matcher API",
        0.05712697286617566
      ],
      [
        "custom",
        0.06550564151431162
      ],
      [
        "matcher",
        0.07569657265135786
      ],
      [
        "matcher API",
        0.11509011595978977
      ],
      [
        "primitive class",
        0.1367178939425947
      ],
      [
        "proposal works",
        0.14633061819299722
      ],
      [
        "number",
        0.15080025937817002
      ],
      [
        "proposal",
        0.16804560292682394
      ],
      [
        "Pattern matching",
        0.16816900065099813
      ]
    ]
  },
  {
    "utterance number": 18,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so the whole point here is that there are a bunch of advantages of this kind of approach",
        "polarity": 0.4,
        "subjectivity": 0.65
      },
      {
        "sentence number": 2,
        "text": " It lets developers express type like checks without being constrained by the meaning of static types",
        "polarity": 0.5,
        "subjectivity": 0.9
      },
      {
        "sentence number": 3,
        "text": " It also leverages existing proposals that are already in the pipeline, despite being at Stage 1",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.43333333333333335,
    "subjectivity": 0.7333333333333334,
    "keywords": [
      [
        "kind of approach",
        0.019195383984643263
      ],
      [
        "bunch of advantages",
        0.02647267473940104
      ],
      [
        "developers express type",
        0.1015187589440701
      ],
      [
        "approach",
        0.11727734907338086
      ],
      [
        "point",
        0.16059248391596775
      ],
      [
        "bunch",
        0.16059248391596775
      ],
      [
        "advantages",
        0.16059248391596775
      ],
      [
        "kind",
        0.16059248391596775
      ],
      [
        "developers express",
        0.18957370212977243
      ],
      [
        "meaning of static",
        0.18957370212977243
      ]
    ]
  },
  {
    "utterance number": 19,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And this is just one example of how to build on existing proposals",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " The key point is that it\u2019s possible and that it has these other advantages like not being explicitly tied to static types in a confusing way",
        "polarity": 0.015000000000000003,
        "subjectivity": 0.735
      },
      {
        "sentence number": 3,
        "text": " And it may make sense also in the future to bring in other proposals such as decorators for more complicated things, for example if you want to annotate function returns or you want to specify a more complex types or have different combinations of types",
        "polarity": 0.009375000000000001,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.01153846153846154,
    "subjectivity": 0.5903846153846154,
    "keywords": [
      [
        "build on existing",
        0.026306954880221008
      ],
      [
        "existing proposals",
        0.06002171545500861
      ],
      [
        "types",
        0.14494490884782246
      ],
      [
        "build",
        0.1601019619587056
      ],
      [
        "existing",
        0.1601019619587056
      ],
      [
        "proposals",
        0.17683449713513685
      ],
      [
        "key point",
        0.188588716354091
      ],
      [
        "explicitly tied",
        0.188588716354091
      ],
      [
        "tied to static",
        0.188588716354091
      ],
      [
        "static types",
        0.20949306655793953
      ]
    ]
  },
  {
    "utterance number": 20,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so the big takeaway from this section is that we really think run-time type checking can be done better in a better way with a different syntax, without coupling it to the type annotations proposal and that that would be the least confusing thing for everyone",
        "polarity": 0.0857142857142857,
        "subjectivity": 0.3857142857142857
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0857142857142857,
    "subjectivity": 0.3857142857142857,
    "keywords": [
      [
        "run-time type checking",
        0.0031133792469181785
      ],
      [
        "type annotations proposal",
        0.0031133792469181785
      ],
      [
        "big takeaway",
        0.017416869738890953
      ],
      [
        "annotations proposal",
        0.017416869738890953
      ],
      [
        "confusing thing",
        0.017416869738890953
      ],
      [
        "run-time type",
        0.022975231256290595
      ],
      [
        "type checking",
        0.022975231256290595
      ],
      [
        "type annotations",
        0.022975231256290595
      ],
      [
        "type",
        0.08582803953788926
      ],
      [
        "syntax",
        0.0878757573221198
      ]
    ]
  },
  {
    "utterance number": 21,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So let me summarize the discussion, sorry, the presentation so far",
        "polarity": -0.2,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": " The big takeaways from the presentation are that we the people who are working on the Type Annotations proposal have taken this committee feedback and investigated the advantages of erased types versus run-time types and especially looked into the feasibility of doing run-time type checking",
        "polarity": 0.0,
        "subjectivity": 0.55
      },
      {
        "sentence number": 3,
        "text": " And in our opinion it\u2019s really hard to meet the proposals goes to unify JavaScript with its typed variants while also having run-time types",
        "polarity": -0.2916666666666667,
        "subjectivity": 0.5416666666666666
      },
      {
        "sentence number": 4,
        "text": " And we think that run-time type checking can be done better in a more intuitive way by a combination of other proposals",
        "polarity": 0.2916666666666667,
        "subjectivity": 0.4583333333333333
      },
      {
        "sentence number": 5,
        "text": " So we are also working on iterating on the syntax as well and we had a very quick presentation on that in this talk",
        "polarity": 0.43333333333333335,
        "subjectivity": 0.65
      },
      {
        "sentence number": 6,
        "text": " It will be presenting more details on that or we plan to present more details on that in future presentations",
        "polarity": 0.25,
        "subjectivity": 0.28125
      },
      {
        "sentence number": 7,
        "text": " I\u2019d be happy to take feedback or Q&A at this point and would especially appreciate discussion on erased versus run time typed portions of it",
        "polarity": 0.4,
        "subjectivity": 1.0
      }
    ],
    "polarity": 0.16111111111111112,
    "subjectivity": 0.5861111111111111,
    "keywords": [
      [
        "run-time type checking",
        0.03164134032343997
      ],
      [
        "Type Annotations proposal",
        0.03595737055195302
      ],
      [
        "run-time types",
        0.05870943279942781
      ],
      [
        "Type Annotations",
        0.06902401099435983
      ],
      [
        "type checking",
        0.07431034341044415
      ],
      [
        "types versus run-time",
        0.08445855626920891
      ],
      [
        "versus run-time types",
        0.08445855626920891
      ],
      [
        "run-time",
        0.08651974045177353
      ],
      [
        "Annotations proposal",
        0.10026769262315728
      ],
      [
        "Type",
        0.10121046657227574
      ]
    ]
  },
  {
    "utterance number": 22,
    "timestamp": "2023-03-22",
    "speaker": "MAH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I think I\u2019m first on the queue",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 2,
        "text": " So I also believe that run time type checks are better served by other proposals",
        "polarity": 0.1875,
        "subjectivity": 0.4375
      },
      {
        "sentence number": 3,
        "text": " I think decorators are a good fit for most cases",
        "polarity": 0.5333333333333333,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " However, I don\u2019t think it\u2019s an either/or answer here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " One possibility is that the typing information that was added there could be made available, for example, to decorators, which could decide to use that information to do run time enforcements",
        "polarity": 0.4,
        "subjectivity": 0.4
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.375,
    "subjectivity": 0.4440476190476191,
    "keywords": [
      [
        "run time",
        0.12897852835277326
      ],
      [
        "queue",
        0.14100874697648003
      ],
      [
        "time type checks",
        0.1474632965133326
      ],
      [
        "run time type",
        0.15490390693103864
      ],
      [
        "run time enforcements",
        0.20850029122459288
      ],
      [
        "run",
        0.2264179234235015
      ],
      [
        "time",
        0.2264179234235015
      ],
      [
        "type checks",
        0.23596399817651212
      ],
      [
        "time type",
        0.24666712262647306
      ],
      [
        "decorators",
        0.2669202994966748
      ]
    ]
  },
  {
    "utterance number": 23,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Well, I see we have a reply",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I think that I\u2019d like to let DE make his point eventually because it\u2019s part of that, but I will put out that that we\u2019ve been in touch with the CPython implementers and one of the sort of pregrets they had was by default types were reified all the time in that every single time you need to reference a type, that actually has to be a run-time operation of some sort",
        "polarity": -0.03571428571428571,
        "subjectivity": 0.15714285714285714
      },
      {
        "sentence number": 3,
        "text": " It has to be in memory",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " It has to be retrievable",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " So there\u2019s a bit of caution there",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " If you do that by default, you can\u2019t put the genie back in the bottle, which is the situation they found themselves in Python where they tried to say what we did this on-demand or you had to opt into it, and they had to roll that back",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " So now you have to opt out when you don\u2019t want that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " Or you have this import from the future or something like that",
        "polarity": 0.0,
        "subjectivity": 0.125
      },
      {
        "sentence number": 9,
        "text": " So there\u2019s a little bit of caution",
        "polarity": -0.1875,
        "subjectivity": 0.5
      },
      {
        "sentence number": 10,
        "text": " I\u2019m not saying that there\u2019s not something that we could do down the line",
        "polarity": -0.15555555555555559,
        "subjectivity": 0.2888888888888889
      },
      {
        "sentence number": 11,
        "text": " But I would say that primarily what we\u2019re trying to do with type annotations is have them erased, have them not contribute to the runtime behavior and find other capabilities where maybe some other solution like that could reflect \u2013 the wrong word, could have a symmetry what you would write in type space and what you would write in value space, run time space",
        "polarity": -0.0875,
        "subjectivity": 0.5375
      },
      {
        "sentence number": 12,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.06949855699855699,
    "subjectivity": 0.3071067821067821,
    "keywords": [
      [
        "reply",
        0.15022161152971553
      ],
      [
        "type",
        0.15127592975723536
      ],
      [
        "bit of caution",
        0.15566225265052538
      ],
      [
        "time",
        0.15712663088835194
      ],
      [
        "sort",
        0.16161268869320294
      ],
      [
        "space",
        0.17935342846967456
      ],
      [
        "make his point",
        0.20356745555147182
      ],
      [
        "point eventually",
        0.20356745555147182
      ],
      [
        "CPython implementers",
        0.20356745555147182
      ],
      [
        "run-time operation",
        0.20356745555147182
      ]
    ]
  },
  {
    "utterance number": 24,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " There\u2019s several things here, what briefly, I guess to make concrete what DRR was saying, a minifier should strip away all the types, but if it\u2019s reflectable, it can\u2019t unless it does some complicated analysis",
        "polarity": -0.0875,
        "subjectivity": 0.4083333333333333
      },
      {
        "sentence number": 2,
        "text": " Also, this is an important question that Matthew is raising, because the textured mode to emit decorator metadata which emits types, but reflects metadata and stuff on classes, this is a very popular flag",
        "polarity": 0.5900000000000001,
        "subjectivity": 1.0
      },
      {
        "sentence number": 3,
        "text": " So even as introduces efficiency issues, it\u2019s a clear demand from developers",
        "polarity": 0.10000000000000002,
        "subjectivity": 0.3833333333333333
      },
      {
        "sentence number": 4,
        "text": " But it\u2019s really unclear what they should emit",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 5,
        "text": " If we wanted to keep this as a language thing which has to be, like, universal, we can\u2019t make any decisions that might kind of be ad hoc",
        "polarity": 0.3,
        "subjectivity": 0.45
      },
      {
        "sentence number": 6,
        "text": " I don\u2019t want to be too critical here because it\u2019s a useful feature",
        "polarity": 0.15,
        "subjectivity": 0.4
      },
      {
        "sentence number": 7,
        "text": " But the only thing I could think of that could be there is the string of what the type is",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 8,
        "text": " How do you resolve any variables",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " Type systems use a different namespace",
        "polarity": 0.0,
        "subjectivity": 0.6
      },
      {
        "sentence number": 10,
        "text": " If we could think of a way to do this feature, I would like it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": " But those are my concerns",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.145,
    "subjectivity": 0.5369047619047619,
    "keywords": [
      [
        "concrete what DRR",
        0.015519043620220432
      ],
      [
        "complicated analysis",
        0.034849669754006156
      ],
      [
        "minifier should strip",
        0.04255079340382992
      ],
      [
        "DRR",
        0.07564350817502452
      ],
      [
        "Matthew is raising",
        0.09977754411797425
      ],
      [
        "make concrete",
        0.10961266899938849
      ],
      [
        "question that Matthew",
        0.115509500314869
      ],
      [
        "emit decorator metadata",
        0.16577035176182514
      ],
      [
        "briefly",
        0.16669254677790382
      ],
      [
        "reflectable",
        0.16669254677790382
      ]
    ]
  },
  {
    "utterance number": 25,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Right",
        "polarity": 0.2857142857142857,
        "subjectivity": 0.5357142857142857
      },
      {
        "sentence number": 2,
        "text": " And quickly adding to that, you may think that you\u2019re just trying to get one type, and yet the underlying types that that thing has to be refined as is this whole monstrosity that you don\u2019t realize you\u2019re bringing into run time until what bundle you interest to produce",
        "polarity": 0.26666666666666666,
        "subjectivity": 0.45
      },
      {
        "sentence number": 3,
        "text": " That\u2019s a tough tradeoff for people they don\u2019t realize they\u2019re making",
        "polarity": -0.3888888888888889,
        "subjectivity": 0.8333333333333334
      }
    ],
    "polarity": 0.10753968253968253,
    "subjectivity": 0.5672619047619047,
    "keywords": [
      [
        "n\u2019t realize",
        0.054376821991694684
      ],
      [
        "\u2019re",
        0.12299440712533878
      ],
      [
        "n\u2019t",
        0.14443604916113942
      ],
      [
        "interest to produce",
        0.15066154878110957
      ],
      [
        "realize",
        0.1697747758505596
      ],
      [
        "\u2019re bringing",
        0.17010280834409855
      ],
      [
        "underlying types",
        0.17847802105667276
      ],
      [
        "\u2019re making",
        0.18357768203176186
      ],
      [
        "quickly adding",
        0.18374716130096333
      ],
      [
        "bringing into run",
        0.18374716130096333
      ]
    ]
  },
  {
    "utterance number": 26,
    "timestamp": "2023-03-22",
    "speaker": "SYG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Hi",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " So what did I say",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Oh, yes",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " The presentation may have suggested that perhaps implementations would be okay with simple nonstructural type checks",
        "polarity": 0.25,
        "subjectivity": 0.4285714285714286
      },
      {
        "sentence number": 5,
        "text": " I think the bar is much much higher than that",
        "polarity": 0.25,
        "subjectivity": 0.5
      },
      {
        "sentence number": 6,
        "text": " We have concerns with the type eraser proposal with just the parsing cost of the things to throw away and parse",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " It could be structured",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " It\u2019s not just a line comment or something",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " We have performance concerns about just that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " Like, we are not okay with any kind of run time type checking, even if it\u2019s simple",
        "polarity": 0.11666666666666665,
        "subjectivity": 0.5857142857142857
      },
      {
        "sentence number": 11,
        "text": " That\u2019s all",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.18333333333333335,
    "subjectivity": 0.5190476190476191,
    "keywords": [
      [
        "type",
        0.20851349780680084
      ],
      [
        "simple",
        0.32166144751982584
      ],
      [
        "concerns",
        0.325135360309552
      ],
      [
        "type checks",
        0.5142690300101528
      ],
      [
        "checks",
        0.542915077469742
      ],
      [
        "nonstructural type checks",
        0.5859099122910328
      ],
      [
        "parse",
        0.5985610545068011
      ],
      [
        "structured",
        0.6158647864068253
      ],
      [
        "presentation",
        0.6178387999178268
      ],
      [
        "suggested",
        0.6178387999178268
      ]
    ]
  },
  {
    "utterance number": 27,
    "timestamp": "2023-03-22",
    "speaker": "DLM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " +1 to what SYG said, we also share concerns about performance about the type eraser and parser and I don\u2019t think we\u2019d ever support a proposal for run time checking",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "run time checking",
        0.0025258761156662004
      ],
      [
        "time checking",
        0.015380821171891606
      ],
      [
        "share concerns",
        0.02570861714399338
      ],
      [
        "concerns about performance",
        0.02570861714399338
      ],
      [
        "type eraser",
        0.02570861714399338
      ],
      [
        "eraser and parser",
        0.02570861714399338
      ],
      [
        "support a proposal",
        0.02570861714399338
      ],
      [
        "proposal for run",
        0.02570861714399338
      ],
      [
        "run time",
        0.02570861714399338
      ],
      [
        "SYG",
        0.08596317751626563
      ]
    ]
  },
  {
    "utterance number": 28,
    "timestamp": "2023-03-22",
    "speaker": "MLS",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Yeah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " The only thing I would add is that even if it\u2019s true run-time type checking, I imagine that all the browser-based engines at least, I don\u2019t know about XS, we have typing system in our higher tiers",
        "polarity": 0.075,
        "subjectivity": 0.6375
      },
      {
        "sentence number": 3,
        "text": " That\u2019s how we get the performance, because we know this is a number or a string or it could be a string or a number, blah, blah, blah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " This provides us no benefit even if we do type checking",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " It just adds an overhead",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " And what\u2019s the semantic if we fail type check",
        "polarity": -0.5,
        "subjectivity": 0.29999999999999993
      },
      {
        "sentence number": 7,
        "text": " What do you do",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.04,
    "subjectivity": 0.57,
    "keywords": [
      [
        "blah",
        0.07372076917453646
      ],
      [
        "type checking",
        0.11484163495023042
      ],
      [
        "Yeah",
        0.12574817830875187
      ],
      [
        "run-time type checking",
        0.1652530144579545
      ],
      [
        "checking",
        0.17192110389292692
      ],
      [
        "type",
        0.18107381700279376
      ],
      [
        "string",
        0.22233440032720825
      ],
      [
        "number",
        0.2556025406709353
      ],
      [
        "higher tiers",
        0.2610103590665132
      ],
      [
        "true run-time type",
        0.274887901777605
      ]
    ]
  },
  {
    "utterance number": 29,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " Unless there\u2019s anything else on this topic, next up is MM",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.25,
    "subjectivity": 0.25,
    "keywords": [
      [
        "topic",
        0.46553351027698087
      ]
    ]
  },
  {
    "utterance number": 30,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay, yes",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " So I was really struck by the idea of using extractors to express dynamic type-like checking",
        "polarity": 0.1,
        "subjectivity": 0.18333333333333335
      },
      {
        "sentence number": 3,
        "text": " I know that I was very negative when extractors were first proposed, but they\u2019ve grown in appeal in my head since then",
        "polarity": -0.07,
        "subjectivity": 0.42666666666666664
      },
      {
        "sentence number": 4,
        "text": " In general, one of the criteria for anything that extends the language is that it should have very wide reach, it should solve a very wide range of problems",
        "polarity": -0.06999999999999999,
        "subjectivity": 0.5133333333333333
      },
      {
        "sentence number": 5,
        "text": " And this use of extractors in this mode suggests that if extractors would generally enable sound static inference because the things that you\u2019re inferring start with something that was checked, then a language with integrated extractors designed to enable good sound static inference might be one that\u2019s just better than a language with type annotations",
        "polarity": 0.43571428571428567,
        "subjectivity": 0.6
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22666666666666666,
    "subjectivity": 0.4973333333333334,
    "keywords": [
      [
        "extractors",
        0.09566051367369252
      ],
      [
        "dynamic type-like checking",
        0.11803175975138962
      ],
      [
        "express dynamic type-like",
        0.14206230628063368
      ],
      [
        "sound static inference",
        0.1447025630811087
      ],
      [
        "language",
        0.15066741194128985
      ],
      [
        "sound static",
        0.1732054250473992
      ],
      [
        "static inference",
        0.1732054250473992
      ],
      [
        "type-like checking",
        0.2005892236920907
      ],
      [
        "express dynamic",
        0.23763689675000246
      ],
      [
        "dynamic type-like",
        0.23763689675000246
      ]
    ]
  },
  {
    "utterance number": 31,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I don\u2019t see why this is an either/or thing",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Extractors can definitely check at the mesothelioma [",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 3,
        "text": "] they\u2019re executed that its argument has that type",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " That would be sound",
        "polarity": 0.4,
        "subjectivity": 0.4
      },
      {
        "sentence number": 5,
        "text": " If you mean soundness in a more nonlocal way \u2013",
        "polarity": 0.09375,
        "subjectivity": 0.59375
      }
    ],
    "polarity": 0.146875,
    "subjectivity": 0.521875,
    "keywords": [
      [
        "thing",
        0.11797671014185607
      ],
      [
        "n\u2019t",
        0.17286683788205306
      ],
      [
        "\u2019re executed",
        0.21489669178785997
      ],
      [
        "Extractors",
        0.3171947781126727
      ],
      [
        "mesothelioma",
        0.3171947781126727
      ],
      [
        "type",
        0.3171947781126727
      ],
      [
        "sound",
        0.4036310100959565
      ],
      [
        "check",
        0.4205766817284309
      ],
      [
        "\u2019re",
        0.4205766817284309
      ],
      [
        "executed",
        0.4205766817284309
      ]
    ]
  },
  {
    "utterance number": 32,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " In a more nonlocal way that the bindings are of known type that they were extracted and that you know that if execution continued on success path, that the input did pass the extractor check",
        "polarity": 0.4,
        "subjectivity": 0.25
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.4,
    "subjectivity": 0.25,
    "keywords": [
      [
        "success path",
        0.005380746843605012
      ],
      [
        "extractor check",
        0.005380746843605012
      ],
      [
        "execution continued",
        0.00717258304785508
      ],
      [
        "continued on success",
        0.00717258304785508
      ],
      [
        "input did pass",
        0.00717258304785508
      ],
      [
        "pass the extractor",
        0.00717258304785508
      ],
      [
        "path",
        0.06341998722529081
      ],
      [
        "check",
        0.06341998722529081
      ],
      [
        "nonlocal",
        0.08438900089923473
      ],
      [
        "bindings",
        0.08438900089923473
      ]
    ]
  },
  {
    "utterance number": 33,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Making a mutable binding, which has checks when it\u2019s written to is a much narrower thing than I think people often want with type system soundness checks",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 2,
        "text": " You want to check tricky nonlocal properties and structural properties like the one that ATA explained",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I think it would be a way to do a check at a particular moment in time",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 4,
        "text": " I think that would be useful, especially at API boundaries, the kinds of things where you want to use private fields and methods",
        "polarity": 0.09999999999999999,
        "subjectivity": 0.4583333333333333
      },
      {
        "sentence number": 5,
        "text": " This would be analogously useful to make a high integrity boundary",
        "polarity": 0.22999999999999998,
        "subjectivity": 0.26999999999999996
      },
      {
        "sentence number": 6,
        "text": " Play well with each other",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 7,
        "text": " But I think this serves a different need from type systems",
        "polarity": 0.0,
        "subjectivity": 0.6
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.1112962962962963,
    "subjectivity": 0.38037037037037036,
    "keywords": [
      [
        "Making a mutable",
        0.028365174168545667
      ],
      [
        "mutable binding",
        0.028365174168545667
      ],
      [
        "system soundness checks",
        0.04140318250128025
      ],
      [
        "type system soundness",
        0.056217777296960404
      ],
      [
        "soundness checks",
        0.07129029803718294
      ],
      [
        "narrower thing",
        0.08358167474380178
      ],
      [
        "ATA explained",
        0.0889424436939064
      ],
      [
        "system soundness",
        0.09246439185679858
      ],
      [
        "check tricky nonlocal",
        0.11065324954894834
      ],
      [
        "tricky nonlocal properties",
        0.12277654056197423
      ]
    ]
  },
  {
    "utterance number": 34,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So if you had the use of an extractor, I think it would be possible for type systems to easily infer, okay, you mean this argument is this type",
        "polarity": 0.15520833333333334,
        "subjectivity": 0.7552083333333334
      },
      {
        "sentence number": 2,
        "text": " That when YK and I were thinking about this area about guards a few years ago, he made an example program that would use TypeScript\u2019s way of asserting types to build a guard system that TypeScript was able to execute run-time and such",
        "polarity": 0.09999999999999999,
        "subjectivity": 0.4083333333333334
      },
      {
        "sentence number": 3,
        "text": " I don\u2019t see any reason why this wouldn\u2019t map over to extractors",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.13154761904761905,
    "subjectivity": 0.6065476190476191,
    "keywords": [
      [
        "easily infer",
        0.029640524237623218
      ],
      [
        "infer",
        0.14585649942576517
      ],
      [
        "systems to easily",
        0.15215440978173533
      ],
      [
        "type systems",
        0.15258974376772413
      ],
      [
        "type",
        0.1925817711914892
      ],
      [
        "easily",
        0.19736696701239048
      ],
      [
        "argument",
        0.19736696701239048
      ],
      [
        "guard system",
        0.20001839921202444
      ],
      [
        "years ago",
        0.20697937713150472
      ],
      [
        "asserting types",
        0.21568571775739626
      ]
    ]
  },
  {
    "utterance number": 35,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And to add on to the point that they\u2019re really complimentary",
        "polarity": 0.3,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " There\u2019s a feature where people often ask us to be able to more specifically type the variable of a catch clause",
        "polarity": 0.5,
        "subjectivity": 0.5625
      },
      {
        "sentence number": 3,
        "text": " It\u2019s a very common complaint",
        "polarity": -0.345,
        "subjectivity": 0.42500000000000004
      },
      {
        "sentence number": 4,
        "text": " Most people want to be able to say that the thing that you\u2019re catching is always an error",
        "polarity": 0.5333333333333333,
        "subjectivity": 0.6749999999999999
      },
      {
        "sentence number": 5,
        "text": " That\u2019s not in practice always enforceable",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " So often you would want to be able to say, yeah, I really don\u2019t know what this is, because provided that it doesn\u2019t pass this check, now do something there",
        "polarity": 0.35,
        "subjectivity": 0.4125
      },
      {
        "sentence number": 7,
        "text": " So an extractor would be able to validate, yes, I have an error",
        "polarity": 0.5,
        "subjectivity": 0.625
      },
      {
        "sentence number": 8,
        "text": " Yes, I have another object or there\u2019s cases where you sort of seek a blend where your public API really wants to enforce those run time checks, but internally, for all intents and purposes, you consider yourself sufficiently consistent",
        "polarity": 0.1125,
        "subjectivity": 0.10416666666666667
      },
      {
        "sentence number": 9,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.25733333333333336,
    "subjectivity": 0.4244444444444444,
    "keywords": [
      [
        "\u2019re really complimentary",
        0.09142997780595079
      ],
      [
        "complimentary",
        0.12292589667363725
      ],
      [
        "catch clause",
        0.13648184254331344
      ],
      [
        "add",
        0.14295175414979588
      ],
      [
        "point",
        0.14295175414979588
      ],
      [
        "specifically type",
        0.15546248390202633
      ],
      [
        "type the variable",
        0.15546248390202633
      ],
      [
        "\u2019re",
        0.16502832831132988
      ],
      [
        "error",
        0.1714874894399397
      ],
      [
        "people",
        0.18241512801348425
      ]
    ]
  },
  {
    "utterance number": 36,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And so they are really nice in that way and you can actually build tooling to say, yeah, my public API always needs to do those sorts of run time checks",
        "polarity": 0.19999999999999998,
        "subjectivity": 0.3888888888888889
      },
      {
        "sentence number": 2,
        "text": " You really are committed to that as well, but have you the option and can compose",
        "polarity": 0.2,
        "subjectivity": 0.2
      }
    ],
    "polarity": 0.2,
    "subjectivity": 0.3416666666666667,
    "keywords": [
      [
        "run time checks",
        0.0023160866321010193
      ],
      [
        "public API",
        0.01143354430345338
      ],
      [
        "time checks",
        0.015099935621315529
      ],
      [
        "build tooling",
        0.02249651976012989
      ],
      [
        "sorts of run",
        0.02249651976012989
      ],
      [
        "run time",
        0.02249651976012989
      ],
      [
        "yeah",
        0.05899937629682816
      ],
      [
        "API",
        0.07621084492189614
      ],
      [
        "checks",
        0.10028582371075691
      ],
      [
        "nice",
        0.14832923246533666
      ]
    ]
  },
  {
    "utterance number": 37,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Mark, does this answer your question",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "Mark",
        0.04491197687864554
      ],
      [
        "answer your question",
        0.04940384002065631
      ],
      [
        "question",
        0.15831692877998726
      ],
      [
        "answer",
        0.29736558256021506
      ]
    ]
  },
  {
    "utterance number": 38,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I\u2019m not sure",
        "polarity": -0.25,
        "subjectivity": 0.8888888888888888
      },
      {
        "sentence number": 2,
        "text": " It\u2019s all intriguing",
        "polarity": 0.30000000000000004,
        "subjectivity": 0.4
      },
      {
        "sentence number": 3,
        "text": " I see Ron is on the reply thread here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " I do want to invite RBN to take this as an opportunity to revise the extractor proposal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " Like I said it\u2019s been growing in my head on other grounds anyway",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 6,
        "text": " If it can elegantly solve some of these problems, that would be great",
        "polarity": 0.65,
        "subjectivity": 0.875
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.24500000000000002,
    "subjectivity": 0.6827777777777777,
    "keywords": [
      [
        "invite RBN",
        0.21149936842738393
      ],
      [
        "Ron",
        0.2864930096935106
      ],
      [
        "reply thread",
        0.2970552202531645
      ],
      [
        "extractor proposal",
        0.3023251102451721
      ],
      [
        "intriguing",
        0.30432682192804345
      ],
      [
        "RBN",
        0.32979167582400315
      ],
      [
        "opportunity to revise",
        0.3893050044576674
      ],
      [
        "revise the extractor",
        0.3893050044576674
      ],
      [
        "proposal",
        0.43853939425135546
      ],
      [
        "reply",
        0.47856326803063454
      ]
    ]
  },
  {
    "utterance number": 39,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Want to go through the queue items here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " We have a couple replies about extractors",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " MAH, if you\u2019ve not spoken yet",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "MAH",
        0.16940121402170724
      ],
      [
        "queue items",
        0.17756077014849755
      ],
      [
        "queue",
        0.38831292435681075
      ],
      [
        "items",
        0.38831292435681075
      ],
      [
        "extractors",
        0.4949246952252326
      ],
      [
        "replies about extractors",
        0.5162806230574593
      ],
      [
        "couple",
        0.68796622281612
      ],
      [
        "replies",
        0.68796622281612
      ],
      [
        "\u2019ve",
        0.7625957055371981
      ],
      [
        "spoken",
        0.7625957055371981
      ]
    ]
  },
  {
    "utterance number": 40,
    "timestamp": "2023-03-22",
    "speaker": "MAH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So it\u2019s more clarification, because I\u2019m not familiar enough with extractors, but would that approach work with bindings that are reassignable",
        "polarity": 0.10416666666666667,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.10416666666666667,
    "subjectivity": 0.5,
    "keywords": [
      [
        "approach work",
        0.02570861714399338
      ],
      [
        "work with bindings",
        0.02570861714399338
      ],
      [
        "clarification",
        0.09568045026443411
      ],
      [
        "extractors",
        0.09568045026443411
      ],
      [
        "reassignable",
        0.09568045026443411
      ],
      [
        "familiar",
        0.15831692877998726
      ],
      [
        "approach",
        0.15831692877998726
      ],
      [
        "work",
        0.15831692877998726
      ],
      [
        "bindings",
        0.15831692877998726
      ]
    ]
  },
  {
    "utterance number": 41,
    "timestamp": "2023-03-22",
    "speaker": "RBN",
    "sentences": [
      {
        "sentence number": 1,
        "text": " The answer is no",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " That go to the comment I was going to make about extractor limitations",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I think extractors are a very interesting potential avenue for type checking of a run time checking at the parameter level where you\u2019re only having to check the inputs once and that\u2019s that transition from the call site to the callee, but they don\u2019t perform any type of action on where you\u2019ve defined them",
        "polarity": 0.1875,
        "subjectivity": 0.6875
      },
      {
        "sentence number": 4,
        "text": " They are essentially just a form of destructuring",
        "polarity": 0.0,
        "subjectivity": 0.3
      },
      {
        "sentence number": 5,
        "text": " So they can provide a run time check at those boundaries, but they don\u2019t have any impact on any type of reassignable bindings",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " You might say that X is a string, but then you can assign it to a number in the body because that\u2019s all unchecked",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.15,
    "subjectivity": 0.61,
    "keywords": [
      [
        "run time",
        0.10156067686350406
      ],
      [
        "run time checking",
        0.1287409030799048
      ],
      [
        "type",
        0.1343939985870503
      ],
      [
        "run time check",
        0.1372770410917435
      ],
      [
        "extractor limitations",
        0.16539414857505752
      ],
      [
        "answer",
        0.16868828634988348
      ],
      [
        "run",
        0.1930926213301476
      ],
      [
        "time",
        0.21858506123042248
      ],
      [
        "n\u2019t",
        0.21858506123042248
      ],
      [
        "type checking",
        0.22922071531404814
      ]
    ]
  },
  {
    "utterance number": 42,
    "timestamp": "2023-03-22",
    "speaker": "RBN",
    "sentences": [
      {
        "sentence number": 1,
        "text": " In the case of extractors in those cases, a type system might be able to infer the type of parameter to say you used this thing hand the only valid input will be a string, and I also apologize if any dog is making noise here",
        "polarity": 0.25,
        "subjectivity": 0.8125
      },
      {
        "sentence number": 2,
        "text": " But we don\u2019t \u2013 we wouldn\u2019t be able to use that at run-time to perform any checks in the body",
        "polarity": 0.5,
        "subjectivity": 0.625
      },
      {
        "sentence number": 3,
        "text": " Extractors also have limitations in that they don\u2019t provide any type of information visible or externally reflectable information about those parameters, you can\u2019t use them on class fields",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 4,
        "text": " For one, there\u2019s a conflict with method declaration because they would look the same and separate from that, again, it\u2019s a type of destructuring, so even if they were feasible, all you would be doing is checking that on the initial assignment",
        "polarity": 0.0,
        "subjectivity": 0.0625
      },
      {
        "sentence number": 5,
        "text": " But, again, not if you mutate that property later on",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Also about your point for decorators to solve those",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " Decorator is interesting for providing rich metadata at run-time that could potentially be used for run-time type checking, but even a decorator on a field can\u2019t do a run-time check on mutable assignments, there\u2019s no potential for that unless you mark that as an accessory if field which allows to represent reads and writes",
        "polarity": 0.21875,
        "subjectivity": 0.8125
      },
      {
        "sentence number": 8,
        "text": " So there are limitations on what you can do with decorators, but they do give you the ability to provide toze type checks at a boundary",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.17045454545454544,
    "subjectivity": 0.5204545454545454,
    "keywords": [
      [
        "thing hand",
        0.05030389275473265
      ],
      [
        "valid input",
        0.05030389275473265
      ],
      [
        "dog is making",
        0.05030389275473265
      ],
      [
        "making noise",
        0.05030389275473265
      ],
      [
        "type",
        0.07760735260747567
      ],
      [
        "n\u2019t",
        0.08903091459831222
      ],
      [
        "type system",
        0.11346851462503382
      ],
      [
        "run-time",
        0.13597837358231402
      ],
      [
        "string",
        0.18495794845834637
      ],
      [
        "case",
        0.18633259126993607
      ]
    ]
  },
  {
    "utterance number": 43,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " That\u2019s definitely clarifying",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " Thank you all for the clarifications",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.5,
    "keywords": [
      [
        "clarifying",
        0.2005079697193566
      ],
      [
        "clarifications",
        0.46553351027698087
      ]
    ]
  },
  {
    "utterance number": 44,
    "timestamp": "2023-03-22",
    "speaker": "ATA",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I was going say most of what I was going to say was covered by DRR and DE",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.5,
    "subjectivity": 0.5,
    "keywords": [
      [
        "covered by DRR",
        0.007743432063478832
      ],
      [
        "DRR",
        0.06650965107397505
      ],
      [
        "covered",
        0.1155310835876123
      ]
    ]
  },
  {
    "utterance number": 45,
    "timestamp": "2023-03-22",
    "speaker": "EAO",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " So the sense I get overall of this whole proposal, that it\u2019s more of a \u2013 it\u2019s a solution looking for a problem that it\u2019s trying to solve a year ago when this got accepted for Stage 1, the problem statement that was in fact considered then was only effective we made up or made concrete during the meeting itself, and then \u2013 so what it looks like now is that since then, that problem statement has evolved to this current form of unifying or unforking JavaScript and somehow then presenting type annotations as a way of achieving this result",
        "polarity": 0.2071428571428571,
        "subjectivity": 0.4857142857142857
      },
      {
        "sentence number": 3,
        "text": " However, I\u2019ve not been able to find any conversation anywhere or description of how in practice this unification is supposed to happen as a consequence of accepting type annotations",
        "polarity": 0.5,
        "subjectivity": 0.625
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.2722222222222222,
    "subjectivity": 0.5027777777777778,
    "keywords": [
      [
        "presenting type annotations",
        0.05414650192436995
      ],
      [
        "type annotations",
        0.05854793706655399
      ],
      [
        "problem statement",
        0.058734226398831024
      ],
      [
        "accepted for Stage",
        0.06977857960771196
      ],
      [
        "accepting type annotations",
        0.07120251173679469
      ],
      [
        "problem",
        0.11060673001425567
      ],
      [
        "achieving this result",
        0.13563984015276342
      ],
      [
        "presenting type",
        0.13907487419416148
      ],
      [
        "statement",
        0.15839926927978362
      ],
      [
        "made concrete",
        0.15913812761020626
      ]
    ]
  },
  {
    "utterance number": 46,
    "timestamp": "2023-03-22",
    "speaker": "EAO",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Now, I filed an issue about this specifically, but I think in general, I\u2019d like to give a little bit of feedback here in that I would presume that we are supposed to actually solve the problem that has been identified here, rather than looking at the technical specifications of a particular possible solution for that",
        "polarity": 0.004861111111111112,
        "subjectivity": 0.4222222222222222
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.004861111111111112,
    "subjectivity": 0.4222222222222222,
    "keywords": [
      [
        "filed an issue",
        0.009239332327148086
      ],
      [
        "bit of feedback",
        0.009239332327148086
      ],
      [
        "solve the problem",
        0.009239332327148086
      ],
      [
        "technical specifications",
        0.009239332327148086
      ],
      [
        "specifically",
        0.06844581806138879
      ],
      [
        "general",
        0.06844581806138879
      ],
      [
        "filed",
        0.09568045026443411
      ],
      [
        "issue",
        0.09568045026443411
      ],
      [
        "give",
        0.09568045026443411
      ],
      [
        "bit",
        0.09568045026443411
      ]
    ]
  },
  {
    "utterance number": 47,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So I think I have to say I have a little bit of trouble taking it seriously when people say do you know what problem you\u2019re solving",
        "polarity": -0.24027777777777778,
        "subjectivity": 0.45555555555555555
      },
      {
        "sentence number": 2,
        "text": " You can say you haven\u2019t proven your motivation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " But this came up with records and tuple as well",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Anyway",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " The way that things are explained sometimes evolves over time",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Anyway",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " For this unification goal, which I personally consider very important and I\u2019ve considered important through the whole life of the proposal, we\u2019re almost there to have all the language features that people have been using in the tooling space in JavaScript, and this has been kind of a unifying theme of what this committee has been doing since ES6",
        "polarity": 0.34400000000000003,
        "subjectivity": 0.72
      },
      {
        "sentence number": 8,
        "text": " It was unifying JavaScript by making built in classes and subsequently built in fields and these sorts of things",
        "polarity": 0.0,
        "subjectivity": 0.05
      },
      {
        "sentence number": 9,
        "text": " We\u2019re filling in the gaps where the ecosystem has been solving language problems, things that are logically language problems with language extensions",
        "polarity": 0.25,
        "subjectivity": 0.25
      },
      {
        "sentence number": 10,
        "text": " Type syntax that doesn\u2019t have to be in a comment block is one of these popular language extensions",
        "polarity": 0.6,
        "subjectivity": 0.9
      },
      {
        "sentence number": 11,
        "text": " It would unify the ecosystem to have a built in form of grammar for this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": " You can see similar dynamics taking place in the CSS working group, things like variables and nesting that CSS is adding solve deep problems that have been solved by tools",
        "polarity": 0.0,
        "subjectivity": 0.4
      },
      {
        "sentence number": 13,
        "text": " Although tools are not going away, neither in CSSs or JavaScript, I think built in JavaScript gives a unified base for everyone to work off of",
        "polarity": -0.8,
        "subjectivity": 1.0
      },
      {
        "sentence number": 14,
        "text": " I think in language, it\u2019s useful in many case to have this comment base",
        "polarity": 0.0,
        "subjectivity": 0.5
      }
    ],
    "polarity": 0.061715686274509796,
    "subjectivity": 0.5568627450980393,
    "keywords": [
      [
        "bit of trouble",
        0.045742404159285203
      ],
      [
        "language",
        0.08527469948301415
      ],
      [
        "built",
        0.12585343689723813
      ],
      [
        "JavaScript",
        0.13214461334542038
      ],
      [
        "things",
        0.13772242549554906
      ],
      [
        "trouble taking",
        0.13881984300208242
      ],
      [
        "\u2019re",
        0.17368621283650304
      ],
      [
        "problems",
        0.18013084666696602
      ],
      [
        "language extensions",
        0.18116227113844008
      ],
      [
        "language problems",
        0.1910762813837177
      ]
    ]
  },
  {
    "utterance number": 48,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I very much want people to take to heart on what DE just said and I want to kind of frame this idea of where this proposal is going over time",
        "polarity": 0.43,
        "subjectivity": 0.5800000000000001
      },
      {
        "sentence number": 2,
        "text": " I want everyone to take the five year view or the ten year view even, where is JavaScript going to be in ten years",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " There is this extremely popular, there\u2019s several popular fortunates for annotations around JavaScript",
        "polarity": 0.39999999999999997,
        "subjectivity": 0.6
      },
      {
        "sentence number": 4,
        "text": " People found it extremely useful",
        "polarity": 0.3,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " I\u2019d say almost everybody here, maybe in some pocket of code has used TypeScript in some flavor",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Maybe not everybody, but maybe the majority of the committee at this point I would say",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " So there\u2019s this clear utility, and there\u2019s a question of can we make the use of that less friction-y, can we make it easier for people to use, can we make it this low configuration thing at the very least",
        "polarity": -0.11416666666666667,
        "subjectivity": 0.3175
      },
      {
        "sentence number": 8,
        "text": " And part of answering that is actually discussing it here in committee over time, trying to understand, trying to come up with a shared vision",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 9,
        "text": " Can we find agreement on those things",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " Over time we might have to come to different shared understandings from what we originally came to",
        "polarity": 0.1875,
        "subjectivity": 0.675
      },
      {
        "sentence number": 11,
        "text": " These ideas took a while in, you know, little laboratories to try to see if people actually like the ideas and see what worked and what different work",
        "polarity": -0.0625,
        "subjectivity": 0.39999999999999997
      },
      {
        "sentence number": 12,
        "text": " Some of the features are not used very much anymore and could probably be dropped a little bit",
        "polarity": 0.036250000000000004,
        "subjectivity": 0.38
      },
      {
        "sentence number": 13,
        "text": " And some of them are extremely useful and are shared between different type systems and things like that too",
        "polarity": 0.15,
        "subjectivity": 0.3
      },
      {
        "sentence number": 14,
        "text": " How much can we explore here",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 15,
        "text": " So today we came with an update to ask can we even agree on no run time type behavior, right",
        "polarity": 0.2857142857142857,
        "subjectivity": 0.5357142857142857
      },
      {
        "sentence number": 16,
        "text": " No run time checking",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 17,
        "text": " Because if we can\u2019t come to a shared understanding there, it\u2019s very hard to go somewhere in the future",
        "polarity": -0.18958333333333335,
        "subjectivity": 0.4145833333333333
      },
      {
        "sentence number": 18,
        "text": " But it seems like we\u2019re not seeing a ton of pushback on that point",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 19,
        "text": " Maybe this are other directions that we can explore",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 20,
        "text": " Maybe we find other place [",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 21,
        "text": "] the language can find the same facilities people are looking for",
        "polarity": 0.0,
        "subjectivity": 0.125
      },
      {
        "sentence number": 22,
        "text": " But even by moving to Stage 1 here, we had an avenue to discuss that, and that with was the biggest thing that we really were seeking last year",
        "polarity": 0.1,
        "subjectivity": 0.13333333333333333
      },
      {
        "sentence number": 23,
        "text": " I think this conversation has been extremely helpful in building some shared context",
        "polarity": -0.125,
        "subjectivity": 1.0
      },
      {
        "sentence number": 24,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.07484002976190475,
    "subjectivity": 0.37332961309523804,
    "keywords": [
      [
        "kind of frame",
        0.04422305222207473
      ],
      [
        "ten year view",
        0.0845999664162155
      ],
      [
        "time",
        0.08787332212423864
      ],
      [
        "people",
        0.08830191079303348
      ],
      [
        "shared",
        0.0962508845838691
      ],
      [
        "year view",
        0.09827574325355153
      ],
      [
        "extremely",
        0.11980359136092783
      ],
      [
        "make",
        0.15362508972016728
      ],
      [
        "year",
        0.15953135013413144
      ],
      [
        "view",
        0.17161199932483684
      ]
    ]
  },
  {
    "utterance number": 49,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So when we talk about unifying JavaScript in ten years is this going to be a viable thing, can we come to a shared understanding, can we have those conversations, and we will try to do that tastefully, because it will have to satisfy the criteria that we outlined in the presentation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " It had to agree with the existing type systems, but it also have to agree with everybody in here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " You have to build consensus and feel good about where we\u2019re going with this",
        "polarity": 0.7,
        "subjectivity": 0.6000000000000001
      },
      {
        "sentence number": 4,
        "text": " It has to be tasteful",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " If we end up on the XKCD with 14 standards, now it makes it harder for people, that\u2019s not a place where we want to be, where it feels bad and there\u2019s more frictioning and the tooling is not helping with any of the problems at all",
        "polarity": -0.09999999999999994,
        "subjectivity": 0.38888888888888884
      },
      {
        "sentence number": 6,
        "text": " I don\u2019t know if that answers your question, but I hope it gives some outline on how to frame it, how to frame the ideas here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.08000000000000003,
    "subjectivity": 0.35333333333333333,
    "keywords": [
      [
        "viable thing",
        0.013628255748549228
      ],
      [
        "shared understanding",
        0.013628255748549228
      ],
      [
        "talk about unifying",
        0.01573240337214981
      ],
      [
        "unifying JavaScript",
        0.01573240337214981
      ],
      [
        "JavaScript in ten",
        0.01573240337214981
      ],
      [
        "ten years",
        0.01573240337214981
      ],
      [
        "satisfy the criteria",
        0.01573240337214981
      ],
      [
        "existing type systems",
        0.04257404065553858
      ],
      [
        "agree",
        0.10670280712092306
      ],
      [
        "thing",
        0.10803231528783816
      ]
    ]
  },
  {
    "utterance number": 50,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " We have one minute remaining",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " If the champions want to ask for any consensus",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I don\u2019t think you\u2019re going for advancement; but you want to ask for run time",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " JHD, I believe we shortly discussed your topic",
        "polarity": 0.0,
        "subjectivity": 0.3
      },
      {
        "sentence number": 5,
        "text": " If you want to say anything last before we wrap up",
        "polarity": 0.0,
        "subjectivity": 0.06666666666666667
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.18333333333333332,
    "keywords": [
      [
        "minute remaining",
        0.02235215878495046
      ],
      [
        "remaining",
        0.12229125971027831
      ],
      [
        "minute",
        0.17878189525615976
      ],
      [
        "JHD",
        0.20954242704085901
      ],
      [
        "run time",
        0.2767170467037833
      ],
      [
        "consensus",
        0.3261013256329346
      ],
      [
        "discussed your topic",
        0.362910692993374
      ],
      [
        "advancement",
        0.4134948298564376
      ],
      [
        "time",
        0.4134948298564376
      ],
      [
        "champions",
        0.43055564085338327
      ]
    ]
  },
  {
    "utterance number": 51,
    "timestamp": "2023-03-22",
    "speaker": "JHD",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Yeah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I mean, I think to what you were saying, DRR, is that if you think there is a timeline, whether that\u2019s one, five, ten years, whatever, at which TypeScript et cetera would no longer need to do any downleveling at all and would be a type checking tool, I think that is an important vision to convince the room of",
        "polarity": 0.029166666666666674,
        "subjectivity": 0.5625
      },
      {
        "sentence number": 3,
        "text": " Because without that vision, the proposal with or without runtime type checks is a very large surface syntax change to the language",
        "polarity": 0.2785714285714286,
        "subjectivity": 0.5571428571428572
      },
      {
        "sentence number": 4,
        "text": " And if we never were to get to that point, then how much have we really unified",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.12767857142857142,
    "subjectivity": 0.44077380952380957,
    "keywords": [
      [
        "type checking tool",
        0.05722436453416689
      ],
      [
        "Yeah",
        0.08640671324384744
      ],
      [
        "ten years",
        0.10553052574621544
      ],
      [
        "runtime type checks",
        0.12613644596437143
      ],
      [
        "checking tool",
        0.128547498472411
      ],
      [
        "DRR",
        0.14072885509645927
      ],
      [
        "type checking",
        0.15455668630184885
      ],
      [
        "important vision",
        0.15455668630184885
      ],
      [
        "TypeScript et cetera",
        0.15729892777256743
      ],
      [
        "convince the room",
        0.15729892777256743
      ]
    ]
  },
  {
    "utterance number": 52,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " You\u2019re asking about if \u2013 I think down leveling behaviour can be viewed as independent of \u2013",
        "polarity": -0.07777777777777779,
        "subjectivity": 0.20694444444444446
      }
    ],
    "polarity": -0.07777777777777779,
    "subjectivity": 0.20694444444444446,
    "keywords": [
      [
        "leveling behaviour",
        0.02570861714399338
      ],
      [
        "viewed as independent",
        0.02570861714399338
      ],
      [
        "\u2019re",
        0.15831692877998726
      ],
      [
        "leveling",
        0.15831692877998726
      ],
      [
        "behaviour",
        0.15831692877998726
      ],
      [
        "viewed",
        0.15831692877998726
      ],
      [
        "independent",
        0.15831692877998726
      ]
    ]
  },
  {
    "utterance number": 53,
    "timestamp": "2023-03-22",
    "speaker": "JHD",
    "sentences": [
      {
        "sentence number": 1,
        "text": " TypeScript or Babel or whatever",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " And I think this is somewhat different in that usually we ship small proposals that are independently motivated that add up to large pictures as well",
        "polarity": -0.05714285714285714,
        "subjectivity": 0.3607142857142857
      },
      {
        "sentence number": 3,
        "text": " This is not a small proposal",
        "polarity": 0.125,
        "subjectivity": 0.4
      },
      {
        "sentence number": 4,
        "text": " It\u2019s primarily motivated by the wide vision",
        "polarity": 0.15000000000000002,
        "subjectivity": 0.45
      }
    ],
    "polarity": 0.01741071428571429,
    "subjectivity": 0.3879464285714286,
    "keywords": [
      [
        "TypeScript or Babel",
        0.015587867816471306
      ],
      [
        "Babel",
        0.09386450386528494
      ],
      [
        "TypeScript",
        0.16351884890343965
      ],
      [
        "ship small proposals",
        0.24345070942020053
      ],
      [
        "small",
        0.24417747063622902
      ],
      [
        "motivated",
        0.30116481852478133
      ],
      [
        "small proposals",
        0.3131813377328405
      ],
      [
        "ship small",
        0.335799386965781
      ],
      [
        "large pictures",
        0.36049934795481464
      ],
      [
        "independently motivated",
        0.4493887432192641
      ]
    ]
  },
  {
    "utterance number": 54,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " It is a long term vision",
        "polarity": -0.05,
        "subjectivity": 0.4
      },
      {
        "sentence number": 2,
        "text": " I do not expect us to rush this in the next month, year, several years",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " We will have to build consensus",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.016666666666666666,
    "subjectivity": 0.13333333333333333,
    "keywords": [
      [
        "long term vision",
        0.013988232015082671
      ],
      [
        "term vision",
        0.04740275061522235
      ],
      [
        "long term",
        0.07651132757680232
      ],
      [
        "vision",
        0.1697603516244247
      ],
      [
        "long",
        0.26659596182680106
      ],
      [
        "term",
        0.26659596182680106
      ],
      [
        "month",
        0.4152535518555878
      ],
      [
        "year",
        0.4293576201257754
      ],
      [
        "years",
        0.4293576201257754
      ],
      [
        "build consensus",
        0.4912384236424132
      ]
    ]
  },
  {
    "utterance number": 55,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " We are at time now",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I encourage you all to continue talking about this after, after the meeting today, but we\u2019re still packed for the rest of the schedule",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Do the champions want to ask for any consensus before we move on",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "meeting today",
        0.1090934922889914
      ],
      [
        "time",
        0.13696809108329627
      ],
      [
        "continue talking",
        0.1445099069107937
      ],
      [
        "\u2019re still packed",
        0.1445099069107937
      ],
      [
        "today",
        0.2768162971845457
      ],
      [
        "schedule",
        0.2768162971845457
      ],
      [
        "encourage",
        0.3553358554145339
      ],
      [
        "continue",
        0.3553358554145339
      ],
      [
        "talking",
        0.3553358554145339
      ],
      [
        "meeting",
        0.3553358554145339
      ]
    ]
  },
  {
    "utterance number": 56,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " The question was does anybody have any concerns about to the extent that this might happen, using the erased semantics rather than the run time type semantics, this isn\u2019t to express endorsement or strong resolution",
        "polarity": 0.4333333333333333,
        "subjectivity": 0.7333333333333333
      },
      {
        "sentence number": 2,
        "text": " That would be out of place for Stage 1, but it would be great to hear these briefly",
        "polarity": 0.4,
        "subjectivity": 0.5416666666666666
      },
      {
        "sentence number": 3,
        "text": " Nobody wants to advocate for non-erased types",
        "polarity": 0.2,
        "subjectivity": 0.1
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.35833333333333334,
    "subjectivity": 0.4791666666666667,
    "keywords": [
      [
        "run time type",
        0.012377220988396774
      ],
      [
        "time type semantics",
        0.012997617657014172
      ],
      [
        "strong resolution",
        0.020907068770176868
      ],
      [
        "run time",
        0.028787882768933064
      ],
      [
        "n\u2019t to express",
        0.028787882768933064
      ],
      [
        "express endorsement",
        0.028787882768933064
      ],
      [
        "endorsement or strong",
        0.028787882768933064
      ],
      [
        "erased semantics",
        0.03015707753346198
      ],
      [
        "time type",
        0.06841095289940992
      ],
      [
        "type semantics",
        0.07179619633773589
      ]
    ]
  },
  {
    "utterance number": 57,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I think beyond that there was strong pushback from browsers that runtime types are very difficult",
        "polarity": -0.10833333333333336,
        "subjectivity": 0.8666666666666667
      },
      {
        "sentence number": 2,
        "text": " Let\u2019s wrap here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " We can add anything else into the notes for the topic",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.10833333333333336,
    "subjectivity": 0.8666666666666667,
    "keywords": [
      [
        "strong pushback",
        0.050888965170882816
      ],
      [
        "pushback from browsers",
        0.050888965170882816
      ],
      [
        "browsers that runtime",
        0.050888965170882816
      ],
      [
        "runtime types",
        0.050888965170882816
      ],
      [
        "difficult",
        0.13696809108329627
      ],
      [
        "strong",
        0.2200560909321288
      ],
      [
        "pushback",
        0.2200560909321288
      ],
      [
        "browsers",
        0.2200560909321288
      ],
      [
        "runtime",
        0.2200560909321288
      ],
      [
        "types",
        0.2200560909321288
      ]
    ]
  },
  {
    "utterance number": 58,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Since this proposal is mostly syntax, I wanted to raise some issues about syntax",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " Let\u2019s start with an illustrative example",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Here you have a function which does a bunch of things",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Is this a valid function",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " What does this do",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Well, at first glance it seems to be okay",
        "polarity": 0.375,
        "subjectivity": 0.41666666666666663
      },
      {
        "sentence number": 7,
        "text": " Looking closer there is this little syntax error, so you might think that this whole thing would be syntax error",
        "polarity": 0.0062500000000000056,
        "subjectivity": 0.45
      },
      {
        "sentence number": 8,
        "text": " But in fact, with something like TypeScript-style type annotations being proposed, this can parse as something completely unexpected, and this has to do with \u201ctoken soups\u201d",
        "polarity": 0.1,
        "subjectivity": 1.0
      },
      {
        "sentence number": 9,
        "text": " At a high level, a token soup is something that starts with a delimiter, consumes a bunch of tokens, and ends with a matching delimiter",
        "polarity": 0.16,
        "subjectivity": 0.5399999999999999
      },
      {
        "sentence number": 10,
        "text": " And this has rather surprising consequences in a program like this",
        "polarity": 0.7,
        "subjectivity": 0.5
      },
      {
        "sentence number": 11,
        "text": " If you\u2019re looking carefully, you might spot a couple other surprises, which I\u2019ll discuss later",
        "polarity": -0.075,
        "subjectivity": 0.4583333333333333
      },
      {
        "sentence number": 12,
        "text": " But this presentation is mostly about the consequences of having token soups in the parser",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 13,
        "text": " So, again, token soups just skip arbitrary sequences of tokens, only matching parentheses, square, and curly brackets",
        "polarity": -0.05,
        "subjectivity": 0.8
      },
      {
        "sentence number": 14,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.17124999999999999,
    "subjectivity": 0.5534523809523809,
    "keywords": [
      [
        "wanted to raise",
        0.046681285020331455
      ],
      [
        "raise some issues",
        0.046681285020331455
      ],
      [
        "token soups",
        0.09907775065663843
      ],
      [
        "syntax",
        0.11100137547558359
      ],
      [
        "token",
        0.11288018987373612
      ],
      [
        "syntax error",
        0.14440312143191325
      ],
      [
        "soups",
        0.16915324877759755
      ],
      [
        "proposal",
        0.21118553677030158
      ],
      [
        "wanted",
        0.21118553677030158
      ],
      [
        "raise",
        0.21118553677030158
      ]
    ]
  },
  {
    "utterance number": 59,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " It\u2019s unknown how lexing slash as division versus regular expression would be handled in a token soup, which is a problem",
        "polarity": -0.05,
        "subjectivity": 0.3384615384615385
      },
      {
        "sentence number": 2,
        "text": " Token soups are used liberally in the proposal to skip past various kinds of type expressions",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 3,
        "text": " Here I outlined a bunch of them",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " All the ones in orange are token soups",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " And the question is: can you tell that something starts a token soup before the token soup starts",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " And that\u2019s a crucial question",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 7,
        "text": " Without a correct answer to this question, the consequences fatal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " There\u2019s a couple possible answers you can give",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 9,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.05833333333333333,
    "subjectivity": 0.5711538461538462,
    "keywords": [
      [
        "division versus regular",
        0.01394043465485338
      ],
      [
        "versus regular expression",
        0.0221930848246191
      ],
      [
        "token soup",
        0.05396903204997093
      ],
      [
        "unknown how lexing",
        0.0555598452675375
      ],
      [
        "lexing slash",
        0.0555598452675375
      ],
      [
        "slash as division",
        0.0555598452675375
      ],
      [
        "division versus",
        0.0555598452675375
      ],
      [
        "versus regular",
        0.0555598452675375
      ],
      [
        "token",
        0.07007857891457646
      ],
      [
        "regular expression",
        0.08666430674888324
      ]
    ]
  },
  {
    "utterance number": 60,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Option A is: it\u2019s unambiguous to the parser whether it\u2019s starting a token soup based on whatever precedes its opening delimiter",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 2,
        "text": " Option B is: the parser might not know whether something is a token soup until it sees what follows it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.1,
    "keywords": [
      [
        "token soup based",
        0.00950281332493537
      ],
      [
        "opening delimiter",
        0.021774033013227983
      ],
      [
        "token soup",
        0.02611200355892978
      ],
      [
        "precedes its opening",
        0.0299587109428479
      ],
      [
        "starting a token",
        0.0348858283942381
      ],
      [
        "soup based",
        0.04474225334442444
      ],
      [
        "Option",
        0.09882684952535489
      ],
      [
        "token",
        0.09882684952535489
      ],
      [
        "delimiter",
        0.12494887830790705
      ],
      [
        "parser",
        0.1255529853081446
      ]
    ]
  },
  {
    "utterance number": 61,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Let\u2019s explore option B first",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 2,
        "text": " So here we have `\u2026 {a:b} => \u2026`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Whether the `{a:b}` is a type token soup or something else depends on the `=>` after it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " But what happens if you have a token soup which contains `{yield / 3}; a = \u201c4/}`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " Well, it depends on whether you treat the slash as a division symbol",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Here the token soup ends in one place or you treat the slash as starting a regular expression",
        "polarity": 0.0,
        "subjectivity": 0.08846153846153847
      },
      {
        "sentence number": 7,
        "text": " It ends someplace else if you treat the slash as a division operator",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " So you can\u2019t really skip past the token",
        "polarity": -0.024999999999999994,
        "subjectivity": 0.225
      },
      {
        "sentence number": 9,
        "text": " Now, you could say that you will always decide one way or the other or ban slash inside token soups",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 10,
        "text": " All three of those have other fatal consequences",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 11,
        "text": " So those are not good options either",
        "polarity": -0.35,
        "subjectivity": 0.6000000000000001
      },
      {
        "sentence number": 12,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.049999999999999996,
    "subjectivity": 0.28878205128205126,
    "keywords": [
      [
        "token",
        0.09294263637722928
      ],
      [
        "token soup",
        0.09754706167254987
      ],
      [
        "slash",
        0.12013258685122861
      ],
      [
        "treat the slash",
        0.12710495676126224
      ],
      [
        "treat",
        0.15060156655620097
      ],
      [
        "soup",
        0.16238698237571345
      ],
      [
        "explore option",
        0.18252713327655826
      ],
      [
        "explore",
        0.24105903866402761
      ],
      [
        "depends",
        0.2718583560297057
      ],
      [
        "type token soup",
        0.2995142698859592
      ]
    ]
  },
  {
    "utterance number": 62,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So let\u2019s go with option A: It\u2019s unambiguous that the parser sees a token soup from what precedes its opening delimiter",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Here I already gave a counterexample to that at the beginning of the presentation where, from a cover grammar, you cannot tell whether something is an async function with some type parameters or whether it\u2019s a less than operator",
        "polarity": -0.16666666666666666,
        "subjectivity": 0.06666666666666667
      },
      {
        "sentence number": 3,
        "text": " And, in fact, because it\u2019s a cover grammar, the identifier doesn\u2019t even need to be `async`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " It happens with any identifier like `foo`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.16666666666666666,
    "subjectivity": 0.06666666666666667,
    "keywords": [
      [
        "opening delimiter",
        0.02013390363712566
      ],
      [
        "token soup",
        0.025458396153234673
      ],
      [
        "precedes its opening",
        0.025458396153234673
      ],
      [
        "cover grammar",
        0.03673630474590325
      ],
      [
        "grammar",
        0.11853839576251554
      ],
      [
        "delimiter",
        0.1252605478705481
      ],
      [
        "cover",
        0.14434955868061583
      ],
      [
        "option",
        0.1575638185740345
      ],
      [
        "unambiguous",
        0.1575638185740345
      ],
      [
        "parser",
        0.1575638185740345
      ]
    ]
  },
  {
    "utterance number": 63,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Here\u2019s another example, `a: (type) => (foo())`",
        "polarity": -0.75,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": " You could interpret the arrow type as token soup, because it could be an arrow function with a type followed by a function body",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Or this could be a label `a:` followed by an arrow function with an argument",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " So here you can\u2019t tell either",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.75,
    "subjectivity": 1.0,
    "keywords": [
      [
        "arrow function",
        0.11540774781014264
      ],
      [
        "foo",
        0.12464477257273603
      ],
      [
        "type",
        0.12882680842894742
      ],
      [
        "arrow",
        0.14434932200993122
      ],
      [
        "function",
        0.14434932200993122
      ],
      [
        "arrow type",
        0.2010058117380266
      ],
      [
        "function body",
        0.21969072678638005
      ],
      [
        "token soup",
        0.25742797291108976
      ],
      [
        "soup",
        0.41593551118834654
      ],
      [
        "body",
        0.41593551118834654
      ]
    ]
  },
  {
    "utterance number": 64,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " It gets worse",
        "polarity": -0.4,
        "subjectivity": 0.6
      },
      {
        "sentence number": 2,
        "text": " The arrow is used for both arrow functions and for types of functions",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " So depending on whether there\u2019s another arrow following this thing, this `(foo())` could be a function expression body or it could be a token soup",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 4,
        "text": " And there\u2019s no possible cover grammar you could write that accepts both",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.13333333333333333,
    "subjectivity": 0.5666666666666667,
    "keywords": [
      [
        "worse",
        0.1796013334286461
      ],
      [
        "arrow",
        0.21427442903421598
      ],
      [
        "functions",
        0.32141164355132396
      ],
      [
        "foo",
        0.3838964478914393
      ],
      [
        "token soup",
        0.4994875896407943
      ],
      [
        "thing",
        0.525558190013198
      ],
      [
        "soup",
        0.525558190013198
      ],
      [
        "types",
        0.5429622732648677
      ],
      [
        "depending",
        0.6338128182611069
      ],
      [
        "expression",
        0.6338128182611069
      ]
    ]
  },
  {
    "utterance number": 65,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So if we have anything similar to TypeScript syntax, then option A is also infeasible",
        "polarity": 0.0,
        "subjectivity": 0.4
      },
      {
        "sentence number": 2,
        "text": " So both options are ruled out",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " This seems like a fatal flaw",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.4,
    "keywords": [
      [
        "TypeScript syntax",
        0.048519231465280525
      ],
      [
        "similar to TypeScript",
        0.07824789033045686
      ],
      [
        "syntax",
        0.17177521569455717
      ],
      [
        "infeasible",
        0.17177521569455717
      ],
      [
        "similar",
        0.26938723336612563
      ],
      [
        "TypeScript",
        0.26938723336612563
      ],
      [
        "option",
        0.49847680737368444
      ],
      [
        "options",
        0.49847680737368444
      ],
      [
        "fatal flaw",
        0.5001019392897985
      ],
      [
        "flaw",
        0.5120663821591114
      ]
    ]
  },
  {
    "utterance number": 66,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " The other problem you have is you can\u2019t embed constant arithmetic inside token soups because of the division problem",
        "polarity": -0.0625,
        "subjectivity": 0.35416666666666663
      },
      {
        "sentence number": 2,
        "text": " The problem also extends to `<`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Let\u2019s say you want to have a constant expression whose value is `a < b ",
        "polarity": 0.0,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 4,
        "text": " a : b`",
        "polarity": 0.75,
        "subjectivity": 1.0
      },
      {
        "sentence number": 5,
        "text": " The token soup will misparse that because it will think that < is a delimiter, which it isn\u2019t",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " These issues were filed a year ago",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " There has been no substantial activity in the last year",
        "polarity": 0.0,
        "subjectivity": 0.06666666666666667
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.125,
    "subjectivity": 0.4216666666666667,
    "keywords": [
      [
        "arithmetic inside token",
        0.024475763447055217
      ],
      [
        "embed constant arithmetic",
        0.024683641425199927
      ],
      [
        "constant arithmetic inside",
        0.024683641425199927
      ],
      [
        "arithmetic inside",
        0.04770186856373319
      ],
      [
        "inside token soups",
        0.057084314103861986
      ],
      [
        "n\u2019t embed constant",
        0.06798967167202326
      ],
      [
        "division problem",
        0.08525085396820341
      ],
      [
        "inside token",
        0.10222788836845138
      ],
      [
        "embed constant",
        0.10303813445129317
      ],
      [
        "constant arithmetic",
        0.10303813445129317
      ]
    ]
  },
  {
    "utterance number": 67,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " There\u2019s a bit more",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " Since this so closely follows TypeScript syntax, it also introduces additional operators which are not reserved words",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I don\u2019t know how this works in TypeScript \u2014 I have not been able to find a TypeScript spec that\u2019s recent",
        "polarity": 0.25,
        "subjectivity": 0.4375
      },
      {
        "sentence number": 4,
        "text": " It\u2019s possible that it has some conditionally reserved words in some context, but without a spec, I just can\u2019t tell",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 5,
        "text": " One common context is `as` followed by parentheses, square brackets, or curlies, which are interpreted and skipped as token soups",
        "polarity": -0.3,
        "subjectivity": 0.5
      },
      {
        "sentence number": 6,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 7,
        "text": " So far so good",
        "polarity": 0.39999999999999997,
        "subjectivity": 0.8
      },
      {
        "sentence number": 8,
        "text": " So let\u2019s say we adopt this syntax",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " And then the proposal gets accepted and somebody writes `module as {\u2026`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " Now is that a token soup or is that a module body",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.25,
    "subjectivity": 0.621875,
    "keywords": [
      [
        "reserved words",
        0.15872602392013993
      ],
      [
        "TypeScript",
        0.17463367230779517
      ],
      [
        "bit",
        0.2258684526321962
      ],
      [
        "reserved",
        0.24543792034191445
      ],
      [
        "words",
        0.24543792034191445
      ],
      [
        "syntax",
        0.2540176797364513
      ],
      [
        "introduces additional operators",
        0.2575602728552328
      ],
      [
        "n\u2019t",
        0.28883225972373827
      ],
      [
        "spec",
        0.28883225972373827
      ],
      [
        "context",
        0.30824529602859846
      ]
    ]
  },
  {
    "utterance number": 68,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So this will introduce a lot of conflicts with other future proposals leading to a death of a thousand cuts",
        "polarity": -0.0625,
        "subjectivity": 0.25
      },
      {
        "sentence number": 2,
        "text": " And the result is if we try to adopt a syntax which is very close to TypeScript, we find that we just can\u2019t",
        "polarity": 0.2,
        "subjectivity": 0.3
      },
      {
        "sentence number": 3,
        "text": " It\u2019s like we\u2019re trying to square a circle",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " So we must adopt something different",
        "polarity": 0.0,
        "subjectivity": 0.6
      },
      {
        "sentence number": 5,
        "text": " And if we adopt something different, then we\u2019re introducing yet another incompatible type standard when there are already a bunch of perfectly good ones",
        "polarity": 0.2333333333333333,
        "subjectivity": 0.4000000000000001
      },
      {
        "sentence number": 6,
        "text": " And that\u2019s the end of my presentation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.1107142857142857,
    "subjectivity": 0.37142857142857144,
    "keywords": [
      [
        "future proposals leading",
        0.004256867231225352
      ],
      [
        "thousand cuts",
        0.020921500692000338
      ],
      [
        "introduce a lot",
        0.02571908479575204
      ],
      [
        "lot of conflicts",
        0.02571908479575204
      ],
      [
        "future proposals",
        0.02571908479575204
      ],
      [
        "proposals leading",
        0.02571908479575204
      ],
      [
        "cuts",
        0.1294156940722129
      ],
      [
        "adopt",
        0.13625335392263274
      ],
      [
        "close to TypeScript",
        0.15548271028563398
      ],
      [
        "introduce",
        0.1583483480710257
      ]
    ]
  },
  {
    "utterance number": 69,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " We have five minutes left",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I screwed up the queue, so I don\u2019t know how to fix it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " But RBN is up first",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 4,
        "text": " The queue is already fixed",
        "polarity": 0.1,
        "subjectivity": 0.2
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.11666666666666665,
    "subjectivity": 0.17777777777777778,
    "keywords": [
      [
        "minutes left",
        0.05572222318139936
      ],
      [
        "left",
        0.18423837248304167
      ],
      [
        "minutes",
        0.28648288610714373
      ],
      [
        "queue",
        0.30674249099297374
      ],
      [
        "RBN",
        0.39325391410169463
      ],
      [
        "screwed",
        0.582369971464719
      ],
      [
        "n\u2019t",
        0.582369971464719
      ],
      [
        "fix",
        0.582369971464719
      ],
      [
        "fixed",
        0.5834206918267477
      ]
    ]
  },
  {
    "utterance number": 70,
    "timestamp": "2023-03-22",
    "speaker": "RBN",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So you had an example that shows a parsing ambiguity with `async` arrow and as I understand it, that\u2019s still an issue that\u2019s being worked out",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I would like to point out that you also had an example, this one here of `Foo` angle bracket as being a potential source",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 3,
        "text": " And I did want to point out that this was already addressed in the slides in the previous topic in that they were looking into \u2013 we\u2019ve been discussing something like the Rust\u2019s turbofish operator, the double colon angle bracket operator for anything that would look like a tip argument that\u2019s passed to a call",
        "polarity": -0.08333333333333333,
        "subjectivity": 0.08333333333333333
      },
      {
        "sentence number": 4,
        "text": " So this, I think, is under discussion as not being valid syntax within the type annotations proposal, although I think it is true that we need to look at the previous example regarding `async`",
        "polarity": 0.09166666666666666,
        "subjectivity": 0.4083333333333333
      },
      {
        "sentence number": 5,
        "text": " That\u2019s being looked at",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0033333333333333327,
    "subjectivity": 0.3966666666666667,
    "keywords": [
      [
        "shows a parsing",
        0.019121447810108896
      ],
      [
        "parsing ambiguity",
        0.019121447810108896
      ],
      [
        "angle bracket operator",
        0.04167247666133046
      ],
      [
        "angle bracket",
        0.04517600023185579
      ],
      [
        "colon angle bracket",
        0.05024829728986506
      ],
      [
        "double colon angle",
        0.08660562689384191
      ],
      [
        "async",
        0.0965092106200165
      ],
      [
        "arrow",
        0.11767315059422635
      ],
      [
        "bracket operator",
        0.12368839935127737
      ],
      [
        "Rust \u2019s turbofish",
        0.12543534698874417
      ]
    ]
  },
  {
    "utterance number": 71,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I think you misunderstood the example",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " The example does not have type parameters of function calls",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " This example is just the async cover grammar `CoverCallExpressionAndAsyncArrowHead`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "function calls",
        0.14005713113751553
      ],
      [
        "misunderstood",
        0.16383273847958243
      ],
      [
        "async cover grammar",
        0.172412864610806
      ],
      [
        "type parameters",
        0.19613242932716538
      ],
      [
        "parameters of function",
        0.19613242932716538
      ],
      [
        "cover grammar",
        0.23956129807083346
      ],
      [
        "CoverCallExpressionAndAsyncArrowHead",
        0.26303348124903125
      ],
      [
        "calls",
        0.3033846052649951
      ],
      [
        "async cover",
        0.3295258815075752
      ],
      [
        "grammar",
        0.3881970960906714
      ]
    ]
  },
  {
    "utterance number": 72,
    "timestamp": "2023-03-22",
    "speaker": "RBN",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I see",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " So the issue is that it\u2019s using member expression and then looking at type parameters",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Thank you",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " That\u2019s fair",
        "polarity": 0.7,
        "subjectivity": 0.9
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.7,
    "subjectivity": 0.9,
    "keywords": [
      [
        "type parameters",
        0.23338172234549467
      ],
      [
        "member expression",
        0.35350894161299157
      ],
      [
        "parameters",
        0.3702539456099092
      ],
      [
        "issue",
        0.5110573480904945
      ],
      [
        "member",
        0.5110573480904945
      ],
      [
        "expression",
        0.5110573480904945
      ],
      [
        "type",
        0.5110573480904945
      ],
      [
        "fair",
        0.5121371841744414
      ]
    ]
  },
  {
    "utterance number": 73,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So I do appreciate the name for this, \u201ctoken soup\u201d",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " It is kind of funny",
        "polarity": 0.425,
        "subjectivity": 0.95
      },
      {
        "sentence number": 3,
        "text": " So I think when we put together the grammar, the tentative one, the one that is really supposed to be a starter for ideas, it was not something we were necessarily committed to as-is",
        "polarity": 0.1,
        "subjectivity": 0.6
      },
      {
        "sentence number": 4,
        "text": " It was an idea",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " The biggest thing we were trying to do is accommodate the existing languages, basically make room for TypeScript syntax, Flow syntax, things like that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Over time, there\u2019s a question of how much language stability there is across these checkers",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 7,
        "text": " And there\u2019s definitely been this question: Could we make that more concrete over time",
        "polarity": 0.21666666666666667,
        "subjectivity": 0.43333333333333335
      },
      {
        "sentence number": 8,
        "text": " And in some cases, like, we could add things to TypeScript where you would need to use a more unambiguous syntax in some cases like a double colon operator when you\u2019re doing type arguments for a function call",
        "polarity": 0.25,
        "subjectivity": 0.25
      },
      {
        "sentence number": 9,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.24,
    "subjectivity": 0.51,
    "keywords": [
      [
        "token soup",
        0.026154915262749347
      ],
      [
        "token",
        0.15965046719896397
      ],
      [
        "soup",
        0.15965046719896397
      ],
      [
        "syntax",
        0.20536435101870051
      ],
      [
        "time",
        0.21726860681298846
      ],
      [
        "kind of funny",
        0.22550233279933526
      ],
      [
        "Flow syntax",
        0.2551075575574972
      ],
      [
        "make",
        0.3007218823187893
      ],
      [
        "cases",
        0.3027534950288867
      ],
      [
        "TypeScript",
        0.3053180702461776
      ]
    ]
  },
  {
    "utterance number": 74,
    "timestamp": "2023-03-22",
    "speaker": "DRR",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Now, I appreciate example 1",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I mean, it\u2019s not something that I\u2019ve not given a chance to give much thought to at this point, to be honest",
        "polarity": 0.1625,
        "subjectivity": 0.5958333333333333
      },
      {
        "sentence number": 3,
        "text": " Partially because until we got a sense of habit type appetites [",
        "polarity": -0.1,
        "subjectivity": 0.3
      },
      {
        "sentence number": 4,
        "text": "] on other things, for example, the run time checking today, it\u2019s a lot of work to resolve the grammatical issues if we didn\u2019t see forward progress on other fundamentals",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 5,
        "text": " So I think that\u2019s why you didn\u2019t see much response there",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 6,
        "text": " We can start thinking about it a little more deeply and understand what we need to do going forward",
        "polarity": 0.10416666666666667,
        "subjectivity": 0.4666666666666666
      },
      {
        "sentence number": 7,
        "text": " I\u2019m curious to get a sense of other people\u2019s thoughts here though",
        "polarity": -0.1125,
        "subjectivity": 0.6875
      },
      {
        "sentence number": 8,
        "text": " Dan, you have an item in the queue",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.03541666666666666,
    "subjectivity": 0.484375,
    "keywords": [
      [
        "n\u2019t",
        0.18026912210920684
      ],
      [
        "sense",
        0.19927107708787814
      ],
      [
        "chance to give",
        0.2002463752889402
      ],
      [
        "habit type appetites",
        0.2060970000001414
      ],
      [
        "time checking today",
        0.2060970000001414
      ],
      [
        "forward",
        0.24531068377208506
      ],
      [
        "sense of habit",
        0.2497936897325056
      ],
      [
        "run time checking",
        0.25339160262869004
      ],
      [
        "type appetites",
        0.279102257513166
      ],
      [
        "checking today",
        0.279102257513166
      ]
    ]
  },
  {
    "utterance number": 75,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I really like the token soup concept",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 2,
        "text": " I understand DRR is willing to compromise on it",
        "polarity": 0.25,
        "subjectivity": 0.75
      },
      {
        "sentence number": 3,
        "text": " But I think it\u2019s really important for the extensibility of the type system",
        "polarity": 0.4,
        "subjectivity": 1.0
      },
      {
        "sentence number": 4,
        "text": " If we tried to give productions for all the types of things for what we consider a reasonable set for the various type systems to have, then that would seriously limit extensibility",
        "polarity": -0.04444444444444443,
        "subjectivity": 0.5888888888888889
      },
      {
        "sentence number": 5,
        "text": " It\u2019s helpful, WH, to have this set of grammar issues set out, and I think we can use this to iterate on the proposal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " It\u2019s hard to see it as a fatal flaw",
        "polarity": -0.2916666666666667,
        "subjectivity": 0.5416666666666666
      },
      {
        "sentence number": 7,
        "text": " Definitely for the proposal overall, but even with the specific concepts of token soup, I don\u2019t yet understand why this can\u2019t be made to work out",
        "polarity": 0.0,
        "subjectivity": 0.20833333333333334
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.04250000000000001,
    "subjectivity": 0.4883333333333333,
    "keywords": [
      [
        "understand DRR",
        0.1270461212764316
      ],
      [
        "token soup",
        0.1391149641208135
      ],
      [
        "set",
        0.17446653073935572
      ],
      [
        "type",
        0.20353150224072097
      ],
      [
        "token soup concept",
        0.21006150564948878
      ],
      [
        "DRR",
        0.21347744906468857
      ],
      [
        "type system",
        0.22086495098232523
      ],
      [
        "token",
        0.23327459027045983
      ],
      [
        "soup",
        0.23327459027045983
      ],
      [
        "extensibility",
        0.24385081131852604
      ]
    ]
  },
  {
    "utterance number": 76,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Yeah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I tried to explain why this is a fatal flaw, and one of the problems is that a token soup cannot contain an arithmetic expression as a part of it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Which means you cannot ever have a type system which uses constant expressions",
        "polarity": 0.0,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.3333333333333333,
    "keywords": [
      [
        "Yeah",
        0.08026166054155467
      ],
      [
        "fatal flaw",
        0.14982004018109998
      ],
      [
        "token soup",
        0.19672392666338837
      ],
      [
        "arithmetic expression",
        0.21175295718850484
      ],
      [
        "constant expressions",
        0.2735665192671422
      ],
      [
        "flaw",
        0.321372292180476
      ],
      [
        "type system",
        0.33045793967240694
      ],
      [
        "explain",
        0.40544467897296155
      ],
      [
        "fatal",
        0.40544467897296155
      ],
      [
        "problems",
        0.40544467897296155
      ]
    ]
  },
  {
    "utterance number": 77,
    "timestamp": "2023-03-22",
    "speaker": "DE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Yeah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Because this wasn\u2019t put on the agenda beforehand, the slides, I haven\u2019t really been able to look at this closely enough to understand",
        "polarity": 0.2333333333333333,
        "subjectivity": 0.44166666666666665
      },
      {
        "sentence number": 3,
        "text": " And I had trouble understanding it online",
        "polarity": -0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.12499999999999999,
    "subjectivity": 0.38125,
    "keywords": [
      [
        "Yeah",
        0.08237764417687853
      ],
      [
        "n\u2019t",
        0.3126276318584983
      ],
      [
        "slides",
        0.4122906395087072
      ],
      [
        "understand",
        0.4122906395087072
      ],
      [
        "understanding it online",
        0.483739832173554
      ],
      [
        "online",
        0.5054575682917825
      ],
      [
        "n\u2019t put",
        0.5314204645911502
      ],
      [
        "put",
        0.5549916791128103
      ],
      [
        "agenda",
        0.5549916791128103
      ],
      [
        "closely",
        0.5549916791128103
      ]
    ]
  },
  {
    "utterance number": 78,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " The basic issues have been filed a year ago",
        "polarity": 0.0,
        "subjectivity": 0.125
      },
      {
        "sentence number": 2,
        "text": " There has been no motion",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " In this presentation I\u2019m purely focusing on the grammar",
        "polarity": 0.21428571428571427,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " I do have opinions, which I did not cover, on all the other issues from RBN\u2019s presentation about whether we should be doing this at all",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 5,
        "text": " Here I just wanted to give a short presentation, just illustrating some of the grammar issues",
        "polarity": 0.0,
        "subjectivity": 0.3
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.02232142857142857,
    "subjectivity": 0.325,
    "keywords": [
      [
        "year ago",
        0.040957937268616566
      ],
      [
        "filed a year",
        0.05561513122406378
      ],
      [
        "basic issues",
        0.1693865923494454
      ],
      [
        "ago",
        0.1714198914420752
      ],
      [
        "issues",
        0.21035652438572042
      ],
      [
        "presentation",
        0.21035652438572042
      ],
      [
        "basic",
        0.22953223195178976
      ],
      [
        "filed",
        0.22953223195178976
      ],
      [
        "year",
        0.22953223195178976
      ],
      [
        "grammar",
        0.27849109031012953
      ]
    ]
  },
  {
    "utterance number": 79,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I think this is still Stage 1, so there\u2019s time to work through this and hopefully we\u2019ll be able to solve the fatal flaws here in the grammar, so this is acceptable",
        "polarity": 0.5,
        "subjectivity": 0.625
      },
      {
        "sentence number": 2,
        "text": " We are now one minute over",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Shu, your topic is the only thing left",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " Do you want to quickly state it",
        "polarity": 0.3333333333333333,
        "subjectivity": 0.5
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.20833333333333331,
    "subjectivity": 0.53125,
    "keywords": [
      [
        "time to work",
        0.030803441134664936
      ],
      [
        "solve the fatal",
        0.030803441134664936
      ],
      [
        "fatal flaws",
        0.030803441134664936
      ],
      [
        "Stage",
        0.0607868920252255
      ],
      [
        "grammar",
        0.11797671014185607
      ],
      [
        "acceptable",
        0.11797671014185607
      ],
      [
        "time",
        0.17286683788205306
      ],
      [
        "work",
        0.17286683788205306
      ],
      [
        "\u2019ll",
        0.17286683788205306
      ],
      [
        "solve",
        0.17286683788205306
      ]
    ]
  },
  {
    "utterance number": 80,
    "timestamp": "2023-03-22",
    "speaker": "SYG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Sure",
        "polarity": 0.5,
        "subjectivity": 0.8888888888888888
      },
      {
        "sentence number": 2,
        "text": " I also confess to not appreciating the full details of the grammar problem here",
        "polarity": 0.35,
        "subjectivity": 0.55
      },
      {
        "sentence number": 3,
        "text": " But my takeaway from WH\u2019s presentation was that at the end this has to divergence point that, like, regardless of the fatality of the current thing that\u2019s tentatively on the menu with token soup, because of type application is a thing in TypeScript and because less than is a thing in JavaScript, it seems like there has to be a divergence point and RBN floated the idea of the turbo fish operator",
        "polarity": -0.08333333333333333,
        "subjectivity": 0.23333333333333334
      },
      {
        "sentence number": 4,
        "text": " Because you necessarily have to diverge the syntax, then have you this N plus one standard problem",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 5,
        "text": " That can\u2019t be just worked around",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " I would like to hear that more seriously addressed than from the champions than just TypeScript will try its darndest to get people to move to new syntax",
        "polarity": 0.10101010101010101,
        "subjectivity": 0.5404040404040403
      }
    ],
    "polarity": 0.10959595959595961,
    "subjectivity": 0.5029741863075197,
    "keywords": [
      [
        "divergence point",
        0.07643303305430109
      ],
      [
        "thing",
        0.10518070384537741
      ],
      [
        "RBN floated",
        0.13577747964151138
      ],
      [
        "turbo fish operator",
        0.1604105601681476
      ],
      [
        "grammar problem",
        0.16214275619323074
      ],
      [
        "appreciating the full",
        0.16315098580963366
      ],
      [
        "full details",
        0.16315098580963366
      ],
      [
        "current thing",
        0.1723567526034837
      ],
      [
        "divergence",
        0.18206904783311753
      ],
      [
        "point",
        0.18206904783311753
      ]
    ]
  },
  {
    "utterance number": 81,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So this is a new proposal in that it\u2019s Stage 0, but not new in that it has been around for a while",
        "polarity": 0.03409090909090909,
        "subjectivity": 0.45454545454545453
      },
      {
        "sentence number": 2,
        "text": " I recently took over ownership of it",
        "polarity": 0.0,
        "subjectivity": 0.25
      },
      {
        "sentence number": 3,
        "text": " I don\u2019t believe this is the person being presented at a plenary",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Kind of the problem that this proposal is looking at is seeing if there\u2019s a problem here",
        "polarity": 0.6,
        "subjectivity": 0.9
      },
      {
        "sentence number": 5,
        "text": " Can we do something in this situation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " The code starts out great",
        "polarity": 0.8,
        "subjectivity": 0.75
      },
      {
        "sentence number": 7,
        "text": " It has something needs to get async on nously",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " It gets it, awaits it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " Code needs a second thing, so it gets it, awaits it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " We used a waterfall because we could have done these things in parallel, but we didn\u2019t",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": " This doesn\u2019t get merged",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": " Whoa whoa whoa, there\u2019s a waterfall, do those two things in parallel",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 13,
        "text": " This is great",
        "polarity": 0.8,
        "subjectivity": 0.75
      },
      {
        "sentence number": 14,
        "text": " Then we need a third thing",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": " The code is using promise all, so the person [",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 16,
        "text": "] doesn\u2019t introduce a water fall",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 17,
        "text": " They keep expanding the existing fork join that we\u2019ve now started",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 18,
        "text": " Time passes, requirements change, more and more things come along",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 19,
        "text": " Application becomes more complex and we end up in a situation where we\u2019re now at a point where for me personally the code has now become harder to read",
        "polarity": 0.025,
        "subjectivity": 0.3
      },
      {
        "sentence number": 20,
        "text": " Complexity of reading this over time is worse than linear",
        "polarity": -0.4,
        "subjectivity": 0.6
      },
      {
        "sentence number": 21,
        "text": " One of the problems here is similar to a function call where you just have ordinal parameters, you have to make sure everything still lines up",
        "polarity": 0.25,
        "subjectivity": 0.6444444444444444
      },
      {
        "sentence number": 22,
        "text": " So here when I\u2019m looking at the code and if I\u2019m looking at feature flags, and I want to be sure that a feature flag is coming from the right place, I have to count one, two, three, one two, three",
        "polarity": 0.39285714285714285,
        "subjectivity": 0.7123015873015872
      },
      {
        "sentence number": 23,
        "text": " Ideally I want to be able to control-click in my editor and jump to where that\u2019s coming from",
        "polarity": 0.7,
        "subjectivity": 0.8125
      },
      {
        "sentence number": 24,
        "text": " But I really can\u2019t",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 25,
        "text": " I have to start counting, and then this problem gets harder, the harder it is to do that counting",
        "polarity": -0.1,
        "subjectivity": 0.0
      },
      {
        "sentence number": 26,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.2174575424575425,
    "subjectivity": 0.41913780663780664,
    "keywords": [
      [
        "Stage",
        0.06681874317666521
      ],
      [
        "code",
        0.10114249836907432
      ],
      [
        "n\u2019t",
        0.10944782137775941
      ],
      [
        "Whoa",
        0.17976295741014267
      ],
      [
        "things",
        0.17978687376857655
      ],
      [
        "problem",
        0.1934152772527861
      ],
      [
        "Whoa whoa",
        0.20505203825050533
      ],
      [
        "harder",
        0.21765018881713818
      ],
      [
        "proposal",
        0.21939446595688136
      ],
      [
        "awaits",
        0.2631134319909715
      ]
    ]
  },
  {
    "utterance number": 82,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So the problem isn\u2019t a technical one",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 2,
        "text": " It\u2019s a human one of reading this code and being competent at this code or navigating this code",
        "polarity": 0.25,
        "subjectivity": 0.3833333333333333
      },
      {
        "sentence number": 3,
        "text": " So what would you do today",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Maybe someone that is confident with promises would rewrite it like this",
        "polarity": 0.5,
        "subjectivity": 0.8333333333333334
      },
      {
        "sentence number": 5,
        "text": " So they would launch all of the tasks, holding onto the promises and then await them",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Or instead of awaiting them individually, await them as a promise",
        "polarity": 0.0,
        "subjectivity": 0.4
      },
      {
        "sentence number": 7,
        "text": "all",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " I think this is fine",
        "polarity": 0.4166666666666667,
        "subjectivity": 0.5
      },
      {
        "sentence number": 9,
        "text": " This is what I\u2019ve done in this situation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": " It can be a little bit annoying to rewrite code, to switch over to this",
        "polarity": -0.49375,
        "subjectivity": 0.7
      },
      {
        "sentence number": 11,
        "text": " I also find for me personally, I find it annoying that I have to introduce so many more variables into scope",
        "polarity": 0.04999999999999999,
        "subjectivity": 0.55
      },
      {
        "sentence number": 12,
        "text": " This becomes annoying, this is a larger function when I start typing session and it doesn\u2019t auto pleat [",
        "polarity": -0.4,
        "subjectivity": 0.7
      },
      {
        "sentence number": 13,
        "text": "] session P",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 14,
        "text": " I really don\u2019t want these promise to be in scope anymore",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 15,
        "text": " I effectively want them to be treated as something you shouldn\u2019t have to think about at all",
        "polarity": 0.6,
        "subjectivity": 0.8
      },
      {
        "sentence number": 16,
        "text": " It\u2019s not clear in the code that these are no longer used and these are all sharing this one big bag of scope",
        "polarity": -0.025000000000000005,
        "subjectivity": 0.24166666666666664
      },
      {
        "sentence number": 17,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.03217592592592592,
    "subjectivity": 0.5046296296296297,
    "keywords": [
      [
        "code",
        0.10351296713017488
      ],
      [
        "n\u2019t",
        0.14519206747408533
      ],
      [
        "annoying",
        0.19485432379521953
      ],
      [
        "scope",
        0.20000769975727611
      ],
      [
        "problem",
        0.20322126221994413
      ],
      [
        "technical",
        0.20322126221994413
      ],
      [
        "promises",
        0.2535890598188028
      ],
      [
        "await",
        0.2621004675816713
      ],
      [
        "rewrite",
        0.28934380057611914
      ],
      [
        "find",
        0.3192131465733039
      ]
    ]
  },
  {
    "utterance number": 83,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So a potential way that we could solve this is having an API like promise",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": "all that is like a nominal version",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " So you pass in a bag, a named bag of promises, and it waits each promise and gives you back a promise that resolves to an object that you can then destructure",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " So this way, you\u2019d use it just like you use promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": "all, but you don\u2019t have to worry about keeping these things in the right order",
        "polarity": 0.2857142857142857,
        "subjectivity": 0.5357142857142857
      },
      {
        "sentence number": 6,
        "text": " It\u2019s all based upon length",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": " An alternative like possible approach and maybe there are other ones",
        "polarity": -0.0625,
        "subjectivity": 0.6875
      },
      {
        "sentence number": 8,
        "text": " Like this is mainly asking for Stage 1, so I want to focus on the problem",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 9,
        "text": " I\u2019m not saying these are the only two solutions, but these are the solutions that jump to mind, is an alternative is focusing on something where you say I want promise from entries, kind of the motivation for this is avoiding the can of worms of what does it mean to kind of get all the things from an object",
        "polarity": 0.221875,
        "subjectivity": 0.871875
      },
      {
        "sentence number": 10,
        "text": " Are we talking about all the enumerable properties, just the string properties, prototype chain",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 11,
        "text": " It is a whole design space change, change of what the user expects",
        "polarity": 0.2,
        "subjectivity": 0.4
      },
      {
        "sentence number": 12,
        "text": " Design space ignores all those things, because it uses a more well understood protocol",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 13,
        "text": " The downside of being more verbose",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 14,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.18576007326007324,
    "subjectivity": 0.625503663003663,
    "keywords": [
      [
        "nominal version",
        0.027418786000651608
      ],
      [
        "API like promise.all",
        0.050356473824073815
      ],
      [
        "API",
        0.0679254797464939
      ],
      [
        "promise",
        0.14946727171560115
      ],
      [
        "version",
        0.15278226891223648
      ],
      [
        "promise.all",
        0.16427325326706438
      ],
      [
        "things",
        0.1674774730015542
      ],
      [
        "named bag",
        0.17148997852080683
      ],
      [
        "bag",
        0.17276919644283595
      ],
      [
        "potential",
        0.17467379837017444
      ]
    ]
  },
  {
    "utterance number": 84,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So what are people doing in the ecosystem",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Blue bird had a ",
        "polarity": 0.0,
        "subjectivity": 0.1
      },
      {
        "sentence number": 3,
        "text": "promise, which can also source graph",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Also npm libraries for this API, combine promises and props and together they have about 180,000 downloads a month",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": " So it\u2019s like the first of the two",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 6,
        "text": " There seem to be APIs that naturally emerge into the ecosystem",
        "polarity": 0.1,
        "subjectivity": 0.4
      },
      {
        "sentence number": 7,
        "text": " So there\u2019s also the waitbox proposal",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " And I don\u2019t think \u2013 I\u2019m kind of only mentioning this to say I don\u2019t think that proposal precludes this or vice versa",
        "polarity": 0.3,
        "subjectivity": 0.95
      },
      {
        "sentence number": 9,
        "text": " So if that proposal went ahead, then potentially it would also have that method added to it",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 10,
        "text": " One of the questions that comes up is why only looking at a nominal version of promise",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 11,
        "text": "all",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 12,
        "text": " Is this actually adding a new dimension that all of the things would add",
        "polarity": 0.06818181818181818,
        "subjectivity": 0.2772727272727273
      },
      {
        "sentence number": 13,
        "text": " I think the answer to this would be no, but again, I think that maybe that\u2019s something that would be kind of looked at in Stage 1, if we went to Stage 1, just to be sure what\u2019s better here, being consistent adding more things or going for a much slimmer API",
        "polarity": 0.42500000000000004,
        "subjectivity": 0.5398148148148149
      },
      {
        "sentence number": 14,
        "text": " I think it\u2019s a natural question to ask",
        "polarity": 0.1,
        "subjectivity": 0.4
      },
      {
        "sentence number": 15,
        "text": " As I said, I think the answer to this is probably, no, we don\u2019t want lots and lots of new methods",
        "polarity": 0.13636363636363635,
        "subjectivity": 0.45454545454545453
      },
      {
        "sentence number": 16,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22780748663101605,
    "subjectivity": 0.5518419489007724,
    "keywords": [
      [
        "n\u2019t",
        0.1637107896390178
      ],
      [
        "ecosystem",
        0.1672349288261408
      ],
      [
        "proposal",
        0.17355790097135784
      ],
      [
        "API",
        0.17811544880716756
      ],
      [
        "Stage",
        0.17843229210266318
      ],
      [
        "people",
        0.19377855899347998
      ],
      [
        "Blue bird",
        0.2281085070260023
      ],
      [
        "source graph",
        0.2281085070260023
      ],
      [
        "combine promises",
        0.2678595137529251
      ],
      [
        "answer",
        0.27678897623988585
      ]
    ]
  },
  {
    "utterance number": 85,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " One other question is can\u2019t people just write this in userland",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 2,
        "text": " And, of course, yes, they can",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Potentially this is like maybe the shortest way of writing it",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 4,
        "text": " Probably not the most performant, but probably shortest for lines of code",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 5,
        "text": " It\u2019s not very long",
        "polarity": 0.019230769230769232,
        "subjectivity": 0.3076923076923077
      },
      {
        "sentence number": 6,
        "text": " I don\u2019t think people \u2013 I think to write this not a lot of code, I think you have to be very comfortable with promises to quickly write this out",
        "polarity": 0.42666666666666664,
        "subjectivity": 0.75
      },
      {
        "sentence number": 7,
        "text": " If you\u2019re writing the code and felt like you wanted this, didn\u2019t want to use a library, just wanted to do it yourself, I\u2019d be surprised if a lot of developers would just immediately know how to write it",
        "polarity": 0.1,
        "subjectivity": 0.9
      },
      {
        "sentence number": 8,
        "text": " I think a lot would, but not the majority of people would spit this out",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": " I think it requires a certain level of comfortability with promises, which I think we\u2019ve discussed before not all developers feel super comfortable with promises",
        "polarity": 0.31587301587301586,
        "subjectivity": 0.6793650793650793
      },
      {
        "sentence number": 10,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.22951831501831502,
    "subjectivity": 0.6620787545787545,
    "keywords": [
      [
        "write",
        0.13012646967355984
      ],
      [
        "lot",
        0.16859341386901558
      ],
      [
        "userland",
        0.19012081178103493
      ],
      [
        "code",
        0.19271843969402438
      ],
      [
        "promises",
        0.19291032402363423
      ],
      [
        "n\u2019t",
        0.20554508161221272
      ],
      [
        "people",
        0.20554508161221272
      ],
      [
        "question",
        0.22905422166651473
      ],
      [
        "comfortable with promises",
        0.2747530562039905
      ],
      [
        "shortest",
        0.27862831949654043
      ]
    ]
  },
  {
    "utterance number": 86,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So that\u2019s the presentation",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " It would be great to get people\u2019s thoughts, feedback on if this is a problem, and if it is should we try and see if there\u2019s a way we can solve it",
        "polarity": 0.8,
        "subjectivity": 0.75
      }
    ],
    "polarity": 0.8,
    "subjectivity": 0.75,
    "keywords": [
      [
        "presentation",
        0.10028582371075691
      ],
      [
        "people \u2019s thoughts",
        0.11755105063023073
      ],
      [
        "thoughts",
        0.2790829227183407
      ],
      [
        "feedback",
        0.2790829227183407
      ],
      [
        "problem",
        0.2790829227183407
      ],
      [
        "great",
        0.37689977775222827
      ],
      [
        "people",
        0.37689977775222827
      ],
      [
        "solve",
        0.37689977775222827
      ]
    ]
  },
  {
    "utterance number": 87,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " 12 minutes remaining, so I think we should have enough time",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " First up is SFC",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      }
    ],
    "polarity": 0.125,
    "subjectivity": 0.41666666666666663,
    "keywords": [
      [
        "minutes remaining",
        0.04188746641162499
      ],
      [
        "minutes",
        0.2005079697193566
      ],
      [
        "remaining",
        0.2005079697193566
      ],
      [
        "time",
        0.2005079697193566
      ],
      [
        "SFC",
        0.2718250226855089
      ]
    ]
  },
  {
    "utterance number": 88,
    "timestamp": "2023-03-22",
    "speaker": "SFC",
    "sentences": [
      {
        "sentence number": 1,
        "text": " There\u2019s a lot of other great topics as well, so I\u2019ll be quick",
        "polarity": 0.3361111111111111,
        "subjectivity": 0.5416666666666666
      },
      {
        "sentence number": 2,
        "text": " I definitely think it\u2019s a problem and I think we shouldn\u2019t limit ourselves to just an API solution",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 3,
        "text": " I think we should explore a syntactical solution as well",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " There\u2019s a couple other entries on the queue with ideas for that, so I\u2019ll yield my time",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.17666666666666667,
    "subjectivity": 0.5,
    "keywords": [
      [
        "great topics",
        0.027047012645594
      ],
      [
        "API solution",
        0.09617216742491612
      ],
      [
        "\u2019ll be quick",
        0.09838596906582035
      ],
      [
        "quick",
        0.12459006173397011
      ],
      [
        "lot",
        0.16227980986351648
      ],
      [
        "great",
        0.16227980986351648
      ],
      [
        "topics",
        0.16227980986351648
      ],
      [
        "\u2019ll",
        0.17722419080557025
      ],
      [
        "n\u2019t limit",
        0.19297777862233262
      ],
      [
        "solution",
        0.20499866970602576
      ]
    ]
  },
  {
    "utterance number": 89,
    "timestamp": "2023-03-22",
    "speaker": "KG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I support this proposal in the same that it\u2019s in",
        "polarity": 0.0,
        "subjectivity": 0.125
      },
      {
        "sentence number": 2,
        "text": " And particularly, own props form, not the entries form",
        "polarity": 0.6,
        "subjectivity": 1.0
      },
      {
        "sentence number": 3,
        "text": " The entries form is too awkward to use",
        "polarity": -0.6,
        "subjectivity": 1.0
      },
      {
        "sentence number": 4,
        "text": " I also want to speak to why I think this is worth doing",
        "polarity": 0.3,
        "subjectivity": 0.1
      },
      {
        "sentence number": 5,
        "text": " Promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": "call is kind of different from most things in the language in that there\u2019s these sort of two lists that you are keeping in sync with each other",
        "polarity": 0.24375000000000002,
        "subjectivity": 0.59375
      },
      {
        "sentence number": 7,
        "text": " There\u2019s the bit you get out that you\u2019re destructuring 90% of the time and the bit that you put in",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " Array",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 9,
        "text": "map: So the values are not necessarily particularly related to each other",
        "polarity": -0.0625,
        "subjectivity": 0.3875
      },
      {
        "sentence number": 10,
        "text": " So it doesn\u2019t really make sense as a list",
        "polarity": 0.2,
        "subjectivity": 0.2
      },
      {
        "sentence number": 11,
        "text": " The only reason that it\u2019s a list is because that\u2019s the structure that we have",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 12,
        "text": " But it\u2019s the structure of this function is different from most functions because in addition to putting things in, you\u2019re getting things out that correspond to the things that you put in in a way that\u2019s these are like two collections of heterogenous objects",
        "polarity": 0.25,
        "subjectivity": 0.55
      },
      {
        "sentence number": 13,
        "text": " You have to keep these collections in sink",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 14,
        "text": " And that\u2019s a nune eke thing",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 15,
        "text": " What I\u2019m interested in exploring syntax, I think the syntax is a thing we\u2019re exploring in other proposals and is best explored in other proposals because it is sort of more cross cutting",
        "polarity": 0.1285714285714286,
        "subjectivity": 0.4214285714285714
      },
      {
        "sentence number": 16,
        "text": " Since we already have `promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 17,
        "text": "all`, even if we did have syntax for this, I would want to have a library form for this as well",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 18,
        "text": " So I think it makes sense to pursue the library form of it prior to pursuing any additional syntax, which can happen later",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 19,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.11956521739130432,
    "subjectivity": 0.4619565217391305,
    "keywords": [
      [
        "form",
        0.09822870880281917
      ],
      [
        "entries form",
        0.11161863084849
      ],
      [
        "things",
        0.13368701224807433
      ],
      [
        "syntax",
        0.1479616289077626
      ],
      [
        "\u2019re",
        0.18449558451649126
      ],
      [
        "entries",
        0.1857879528693381
      ],
      [
        "support",
        0.21412817439948686
      ],
      [
        "library form",
        0.2228262559873383
      ],
      [
        "proposals",
        0.26499326191900374
      ],
      [
        "list",
        0.2658957949544341
      ]
    ]
  },
  {
    "utterance number": 90,
    "timestamp": "2023-03-22",
    "speaker": "SYG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " This may be just my naivety as a non-JS programmer who doesn\u2019t program that much JS, but when I was reading the proposal on the slides, is the basic problem that positional things are hard to keep track of",
        "polarity": -0.030555555555555558,
        "subjectivity": 0.2888888888888889
      },
      {
        "sentence number": 2,
        "text": " Like, if so, why is it worth solving here for `promise",
        "polarity": 0.3,
        "subjectivity": 0.1
      },
      {
        "sentence number": 3,
        "text": "all`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " Is it because `promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": "all` is special in the way KG said",
        "polarity": 0.35714285714285715,
        "subjectivity": 0.5714285714285714
      },
      {
        "sentence number": 6,
        "text": " Why aren\u2019t provisional function parameters super confusing",
        "polarity": 0.016666666666666663,
        "subjectivity": 0.5333333333333333
      },
      {
        "sentence number": 7,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0855442176870748,
    "subjectivity": 0.3721088435374149,
    "keywords": [
      [
        "non-JS programmer",
        0.03252794699293266
      ],
      [
        "reading the proposal",
        0.03252794699293266
      ],
      [
        "basic problem",
        0.03252794699293266
      ],
      [
        "problem that positional",
        0.03252794699293266
      ],
      [
        "positional things",
        0.03252794699293266
      ],
      [
        "things are hard",
        0.03252794699293266
      ],
      [
        "promise.all",
        0.08613600800291334
      ],
      [
        "n\u2019t program",
        0.08770631877078926
      ],
      [
        "slides",
        0.1303259797580061
      ],
      [
        "naivety",
        0.17749144254619129
      ]
    ]
  },
  {
    "utterance number": 91,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So I think yes you\u2019re right that I\u2019m posting that the primary problem is the tracking of all the things",
        "polarity": 0.34285714285714286,
        "subjectivity": 0.5178571428571428
      },
      {
        "sentence number": 2,
        "text": " Personally I feel like in some ways it is a solved problem for JavaScript in that we have a solution, which is, instead of having a function that takes many arguments, it takes one, which is an object that\u2019s destructured, but to use that, you have to be the author of that function to use it",
        "polarity": 0.25,
        "subjectivity": 0.4
      },
      {
        "sentence number": 3,
        "text": " It\u2019s a breaking change to just change to that",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " So I guess it\u2019s like we\u2019re in a position to write that function in the language, and we\u2019re in a position where we can make a named function argument using the kind of existing pattern that the language allows",
        "polarity": 0.6,
        "subjectivity": 0.9
      },
      {
        "sentence number": 5,
        "text": " And, yes, I think \u2013 is it solving it specifically promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": "all, I think it is an API language that\u2019s prop you lar [",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 7,
        "text": "] where it\u2019s collection in, collection out, where the person who is calling it kind of cares way more that it\u2019s named than the person receiving it",
        "polarity": 0.55,
        "subjectivity": 0.7
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.4122448979591837,
    "subjectivity": 0.5908163265306123,
    "keywords": [
      [
        "primary problem",
        0.03782089881329746
      ],
      [
        "function",
        0.08534278654820976
      ],
      [
        "named function argument",
        0.09018031422628425
      ],
      [
        "\u2019re",
        0.09478315154502476
      ],
      [
        "solved problem",
        0.09985976296062767
      ],
      [
        "problem",
        0.11436579319519384
      ],
      [
        "language",
        0.1359664231335576
      ],
      [
        "things",
        0.1404597497662838
      ],
      [
        "function argument",
        0.1513584503122002
      ],
      [
        "API language",
        0.15538811247239412
      ]
    ]
  },
  {
    "utterance number": 92,
    "timestamp": "2023-03-22",
    "speaker": "JBD",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So I think my response also builds on what KG is saying",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " When the list of a function\u2019s arguments usually are related to each other",
        "polarity": -0.125,
        "subjectivity": 0.3416666666666666
      },
      {
        "sentence number": 3,
        "text": " They have a semantic that attaches to each other and they mean something",
        "polarity": -0.21875,
        "subjectivity": 0.53125
      },
      {
        "sentence number": 4,
        "text": " But while you can pass a list of similarly related things to `promise",
        "polarity": 0.0,
        "subjectivity": 0.4
      },
      {
        "sentence number": 5,
        "text": "all`, also often one is passing unrelated things that simply one wants to parallellize and not make block each other",
        "polarity": 0.025000000000000005,
        "subjectivity": 0.2773809523809524
      },
      {
        "sentence number": 6,
        "text": " And it just doesn\u2019t \u2013 at that point yes, it is hard to count them, because there's\u2019 no inherent meaning in the code",
        "polarity": -0.2916666666666667,
        "subjectivity": 0.5416666666666666
      },
      {
        "sentence number": 7,
        "text": " It\u2019s literally just like I want to `await` all these things together and then get them back in variable names and it\u2019s just hard to keep track of that",
        "polarity": -0.14583333333333334,
        "subjectivity": 0.2708333333333333
      },
      {
        "sentence number": 8,
        "text": " I\u2019ve got lots of places in code where I have these two lists that I keep in sync, an it\u2019s just annoying boilerplate that\u2019s easy to get wrong",
        "polarity": -0.24166666666666667,
        "subjectivity": 0.6583333333333333
      }
    ],
    "polarity": -0.14296875000000003,
    "subjectivity": 0.43976934523809524,
    "keywords": [
      [
        "response also builds",
        0.028333844035840543
      ],
      [
        "things",
        0.16531453904788543
      ],
      [
        "response",
        0.16599143706129346
      ],
      [
        "builds",
        0.16599143706129346
      ],
      [
        "function \u2019s arguments",
        0.20055220335647148
      ],
      [
        "list",
        0.20506018541249105
      ],
      [
        "related",
        0.21016257405088884
      ],
      [
        "similarly related things",
        0.22329944045304162
      ],
      [
        "hard",
        0.23642063666013277
      ],
      [
        "related things",
        0.2633561607876505
      ]
    ]
  },
  {
    "utterance number": 93,
    "timestamp": "2023-03-22",
    "speaker": "KG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " And there\u2019s no inherent order",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " If you switch two arguments to a function, that\u2019s a different thing",
        "polarity": 0.0,
        "subjectivity": 0.6
      },
      {
        "sentence number": 3,
        "text": " If you switch the order of these things, they are ordered because you have to put them in in some particular way, but they\u2019re not \u2013",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      }
    ],
    "polarity": 0.08333333333333333,
    "subjectivity": 0.4666666666666667,
    "keywords": [
      [
        "inherent order",
        0.12844760819699044
      ],
      [
        "inherent",
        0.22743082570600598
      ],
      [
        "switch",
        0.23957162180549982
      ],
      [
        "order",
        0.25024493590327546
      ],
      [
        "thing",
        0.3898081840202281
      ],
      [
        "things",
        0.3898081840202281
      ],
      [
        "function",
        0.3955301185610605
      ],
      [
        "arguments",
        0.5055403220278124
      ],
      [
        "switch two arguments",
        0.5776437774783829
      ],
      [
        "ordered",
        0.5983265763802191
      ]
    ]
  },
  {
    "utterance number": 94,
    "timestamp": "2023-03-22",
    "speaker": "JBD",
    "sentences": [
      {
        "sentence number": 1,
        "text": " All is ordered in the sense that the first one fails, but usually when I\u2019m doing this, I expect them to succeed",
        "polarity": -0.16666666666666666,
        "subjectivity": 0.29444444444444445
      },
      {
        "sentence number": 2,
        "text": " If I cared about the order",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.16666666666666666,
    "subjectivity": 0.29444444444444445,
    "keywords": [
      [
        "fails",
        0.10028582371075691
      ],
      [
        "succeed",
        0.10028582371075691
      ],
      [
        "ordered",
        0.14832923246533666
      ],
      [
        "sense",
        0.14832923246533666
      ],
      [
        "expect",
        0.14832923246533666
      ],
      [
        "order",
        0.2790829227183407
      ],
      [
        "cared",
        0.37689977775222827
      ]
    ]
  },
  {
    "utterance number": 95,
    "timestamp": "2023-03-22",
    "speaker": "SFC",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I have two replies",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " One is when I am wearing the hat as a JS user or programmer, I find myself when I\u2019m writing complicated code, I use the library that gives me the ability to name promises or name callbacks",
        "polarity": -0.5,
        "subjectivity": 1.0
      },
      {
        "sentence number": 3,
        "text": " I find that to be very important when organizing my code",
        "polarity": 0.52,
        "subjectivity": 1.0
      },
      {
        "sentence number": 4,
        "text": " Being able to do this in the syntax would be finally the last thing I can be before I can drop my library and use native JS promises to do everything I need",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.5638888888888889
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.10400000000000001,
    "subjectivity": 0.7383333333333334,
    "keywords": [
      [
        "writing complicated code",
        0.04397768652452315
      ],
      [
        "complicated code",
        0.10193637400927123
      ],
      [
        "replies",
        0.11715007736867324
      ],
      [
        "user or programmer",
        0.1273192265066367
      ],
      [
        "code",
        0.12919799248005795
      ],
      [
        "find",
        0.14655786565289747
      ],
      [
        "wearing the hat",
        0.14700772038448484
      ],
      [
        "writing complicated",
        0.14700772038448484
      ],
      [
        "library",
        0.18099408565546277
      ],
      [
        "promises",
        0.18099408565546277
      ]
    ]
  },
  {
    "utterance number": 96,
    "timestamp": "2023-03-22",
    "speaker": "SFC",
    "sentences": [
      {
        "sentence number": 1,
        "text": " My other topic is regarding arguments",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 2,
        "text": " There is some precedent already at Intel for using a promises bag, which is your named promises",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " And it makes code much more readable",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " I don\u2019t need to go on more about that, but yeah",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 5,
        "text": " Not everything needs to be positional, and there\u2019s \u2013 we already have precedent from things get unwieldy positional, we turn them into an object",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.2916666666666667,
    "subjectivity": 0.4583333333333333,
    "keywords": [
      [
        "arguments",
        0.16567652993297713
      ],
      [
        "topic",
        0.23680133940954595
      ],
      [
        "Intel",
        0.2656112407622244
      ],
      [
        "promises",
        0.27256005083546786
      ],
      [
        "positional",
        0.27739839429967733
      ],
      [
        "promises bag",
        0.2861740869132649
      ],
      [
        "precedent",
        0.31648752473040587
      ],
      [
        "named promises",
        0.3941965010136566
      ],
      [
        "bag",
        0.40816743584577714
      ],
      [
        "readable",
        0.5011972109102935
      ]
    ]
  },
  {
    "utterance number": 97,
    "timestamp": "2023-03-22",
    "speaker": "HAX",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I support Stage 1, because I think it\u2019s worth to explore the problem",
        "polarity": 0.3,
        "subjectivity": 0.1
      },
      {
        "sentence number": 2,
        "text": " But I hope we don\u2019t limit it to await dictionary as the only solution",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 3,
        "text": " For example, Swift, which also has async/await, but does not use promise",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " It has the underlying mechanism TaskGroup which have the similar API like promise, but most of the time, developers do not need to use that",
        "polarity": 0.25,
        "subjectivity": 0.45
      },
      {
        "sentence number": 5,
        "text": " It has a syntax like `async let session = getSession, user = getUser();`",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " It can be used to solve most use cases of `Promise",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 7,
        "text": "all` or this proposal trying to solve",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": " I don\u2019t mean the Swift solution is better, but I think we could explore different solution for this problem",
        "polarity": 0.0625,
        "subjectivity": 0.5958333333333333
      },
      {
        "sentence number": 9,
        "text": " Thank you",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 10,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.1859375,
    "subjectivity": 0.5359375,
    "keywords": [
      [
        "support Stage",
        0.013425532922848767
      ],
      [
        "Stage",
        0.06550476578468704
      ],
      [
        "Swift",
        0.1799923862587159
      ],
      [
        "solution",
        0.1916610052574377
      ],
      [
        "support",
        0.20223987760810483
      ],
      [
        "worth",
        0.20223987760810483
      ],
      [
        "promise",
        0.20912031873331555
      ],
      [
        "problem",
        0.22004741594775382
      ],
      [
        "await",
        0.23112231490886556
      ],
      [
        "worth to explore",
        0.23567213328307932
      ]
    ]
  },
  {
    "utterance number": 98,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " This seems like a solution to a subset of what I think the problem is, and I view the problem as having dynamic dataflow graph, wherein these things can be doing an operation and then feeding the results to the next operation and so on",
        "polarity": 0.0,
        "subjectivity": 0.08333333333333333
      },
      {
        "sentence number": 2,
        "text": " So I would hate for us to spec this library and then have to do yet another library to solve the data flow graph problem",
        "polarity": -0.8,
        "subjectivity": 0.9
      },
      {
        "sentence number": 3,
        "text": " As part of exploration I\u2019d like to see if we can do a more generic solution",
        "polarity": 0.25,
        "subjectivity": 0.25
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.06000000000000001,
    "subjectivity": 0.31333333333333335,
    "keywords": [
      [
        "dynamic dataflow graph",
        0.007575436401033043
      ],
      [
        "dynamic dataflow",
        0.026578611317706582
      ],
      [
        "feeding the results",
        0.026578611317706582
      ],
      [
        "flow graph problem",
        0.03366367756211254
      ],
      [
        "dataflow graph",
        0.04438975954007587
      ],
      [
        "operation",
        0.06522738177243256
      ],
      [
        "graph problem",
        0.07045583796736442
      ],
      [
        "view the problem",
        0.07128572910027396
      ],
      [
        "problem",
        0.08305711169569743
      ],
      [
        "flow graph",
        0.11806314747007332
      ]
    ]
  },
  {
    "utterance number": 99,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Off the top of your head of any other languages that could be inspiration for me to look at",
        "polarity": 0.1875,
        "subjectivity": 0.4375
      },
      {
        "sentence number": 2,
        "text": " Just if you have any off the top of your head",
        "polarity": 0.5,
        "subjectivity": 0.5
      }
    ],
    "polarity": 0.2916666666666667,
    "subjectivity": 0.4583333333333333,
    "keywords": [
      [
        "top",
        0.11918925921541844
      ],
      [
        "head",
        0.15533950844442923
      ],
      [
        "languages",
        0.20713198455404339
      ],
      [
        "inspiration",
        0.20713198455404339
      ]
    ]
  },
  {
    "utterance number": 100,
    "timestamp": "2023-03-22",
    "speaker": "WH",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Data flow languages",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " And there are languages which do that by default",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " Haskell and such",
        "polarity": 0.0,
        "subjectivity": 0.5
      },
      {
        "sentence number": 4,
        "text": " But that\u2019s inherent in the language",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 5,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.5,
    "keywords": [
      [
        "Data flow languages",
        0.03743171022856331
      ],
      [
        "Data flow",
        0.051527220217583256
      ],
      [
        "flow languages",
        0.1775471572501033
      ],
      [
        "Data",
        0.18613158152738177
      ],
      [
        "flow",
        0.263266819550329
      ],
      [
        "languages",
        0.2863579813249448
      ],
      [
        "default",
        0.4426763443795853
      ],
      [
        "Haskell",
        0.5364422415806851
      ],
      [
        "language",
        0.5727159626498896
      ],
      [
        "inherent",
        0.6890465657653385
      ]
    ]
  },
  {
    "utterance number": 101,
    "timestamp": "2023-03-22",
    "speaker": "JFI",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I had a comment related, if my microphone is working",
        "polarity": 0.0,
        "subjectivity": 0.4
      },
      {
        "sentence number": 2,
        "text": " Yeah, I noticed it in other places",
        "polarity": -0.125,
        "subjectivity": 0.375
      },
      {
        "sentence number": 3,
        "text": " I think DE had expressed interest in is there something around signals that the language could look into",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": " The scale to depend on the result of the other one and whether that breaks down",
        "polarity": -0.14027777777777778,
        "subjectivity": 0.3319444444444445
      },
      {
        "sentence number": 5,
        "text": " So with Waldemar\u2019s question of is there a data flow library for promises that might go in parallel or sequence, does that relate to signals at all",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 6,
        "text": " Nothing concrete",
        "polarity": 0.15000000000000002,
        "subjectivity": 0.30000000000000004
      },
      {
        "sentence number": 7,
        "text": " Just pointing that out",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 8,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.04259259259259259,
    "subjectivity": 0.2898148148148148,
    "keywords": [
      [
        "comment related",
        0.02049270887461586
      ],
      [
        "microphone is working",
        0.02049270887461586
      ],
      [
        "related",
        0.12415713985348636
      ],
      [
        "working",
        0.12415713985348636
      ],
      [
        "comment",
        0.16174012142864078
      ],
      [
        "microphone",
        0.16174012142864078
      ],
      [
        "signals",
        0.24860848898849458
      ],
      [
        "Yeah",
        0.25478662279314274
      ],
      [
        "Waldemar \u2019s question",
        0.2591399200796645
      ],
      [
        "expressed interest",
        0.3228301316211849
      ]
    ]
  },
  {
    "utterance number": 102,
    "timestamp": "2023-03-22",
    "speaker": "DM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " So when we discussed this week, we were all skeptical about the motivation behind that",
        "polarity": -0.45,
        "subjectivity": 0.6
      },
      {
        "sentence number": 2,
        "text": " I think Shu\u2019s point around that resolved it",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " I see this focus on the API first and then look at syntax as a separate portion of that",
        "polarity": 0.25,
        "subjectivity": 0.3333333333333333
      }
    ],
    "polarity": -0.21666666666666667,
    "subjectivity": 0.5111111111111111,
    "keywords": [
      [
        "discussed this week",
        0.01859446618045681
      ],
      [
        "Shu \u2019s point",
        0.10378909220852033
      ],
      [
        "week",
        0.11142476118001256
      ],
      [
        "discussed",
        0.16383273847958243
      ],
      [
        "skeptical",
        0.16383273847958243
      ],
      [
        "motivation",
        0.16383273847958243
      ],
      [
        "Shu",
        0.23220979985467174
      ],
      [
        "API",
        0.30586129229111825
      ],
      [
        "separate portion",
        0.3295258815075752
      ],
      [
        "point",
        0.4049347717850166
      ]
    ]
  },
  {
    "utterance number": 103,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " We are right at time now",
        "polarity": 0.2857142857142857,
        "subjectivity": 0.5357142857142857
      },
      {
        "sentence number": 3,
        "text": " Would you like to ask for consensus",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.39285714285714285,
    "subjectivity": 0.5178571428571428,
    "keywords": [
      [
        "consensus",
        0.5880798524606783
      ],
      [
        "time",
        0.68796622281612
      ]
    ]
  },
  {
    "utterance number": 104,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I would like to ask for consensus for Stage 1 to explore this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " Yeah",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " My preference is to explore this as an API",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "consensus for Stage",
        0.014338418623094132
      ],
      [
        "Stage",
        0.067323059408266
      ],
      [
        "explore",
        0.15789108176062075
      ],
      [
        "consensus",
        0.2099686893006317
      ],
      [
        "Yeah",
        0.24941629891189432
      ],
      [
        "API",
        0.26753144382325184
      ],
      [
        "preference",
        0.5735276476815263
      ]
    ]
  },
  {
    "utterance number": 105,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Do we have consensus \u2013 I think we\u2019re at Stage 1, so we\u2019re not tied to a particular solution yet",
        "polarity": 0.16666666666666666,
        "subjectivity": 0.3333333333333333
      },
      {
        "sentence number": 2,
        "text": " But consensus to explore this at least as an API solution",
        "polarity": -0.3,
        "subjectivity": 0.4
      },
      {
        "sentence number": 3,
        "text": " Explicit support, please",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 4,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.06666666666666667,
    "subjectivity": 0.3666666666666667,
    "keywords": [
      [
        "\u2019re at Stage",
        0.0352421447766083
      ],
      [
        "Stage",
        0.07001630894020927
      ],
      [
        "\u2019re",
        0.10347896054596852
      ],
      [
        "\u2019re not tied",
        0.10919246697059086
      ],
      [
        "API solution",
        0.11999329658254013
      ],
      [
        "consensus",
        0.2043647263591142
      ],
      [
        "solution",
        0.2043647263591142
      ],
      [
        "tied",
        0.22743082570600598
      ],
      [
        "API",
        0.2621233005720626
      ],
      [
        "Explicit support",
        0.3126762196369924
      ]
    ]
  },
  {
    "utterance number": 106,
    "timestamp": "2023-03-22",
    "speaker": "KG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I explicitly support this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "explicitly support",
        0.09700399286574239
      ],
      [
        "explicitly",
        0.29736558256021506
      ],
      [
        "support",
        0.29736558256021506
      ]
    ]
  },
  {
    "utterance number": 107,
    "timestamp": "2023-03-22",
    "speaker": "RBN",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I also support this",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "support",
        0.29736558256021506
      ]
    ]
  },
  {
    "utterance number": 108,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " And does anyone object",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.5,
    "subjectivity": 0.5,
    "keywords": [
      [
        "object",
        0.46553351027698087
      ]
    ]
  },
  {
    "utterance number": 109,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I do not object, but I want to \u2013 I do support it as a Stage 1 investigation, but I want to register my reluctance",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I think that the feature in any of its forms doesn\u2019t pay for itself, that the inconvenience that it\u2019s overcoming, once you pull the launching off into separate variable declarations is minor, and it\u2019s a specialized solution that then gets multiplied by four once you take into the oring that nalty to the promise",
        "polarity": -0.05,
        "subjectivity": 0.2
      },
      {
        "sentence number": 3,
        "text": "call",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": -0.05,
    "subjectivity": 0.2,
    "keywords": [
      [
        "register my reluctance",
        0.009145555775475097
      ],
      [
        "separate variable declarations",
        0.03409317203846474
      ],
      [
        "Stage",
        0.04776309965539685
      ],
      [
        "investigation",
        0.05899937629682816
      ],
      [
        "declarations is minor",
        0.07689846664795487
      ],
      [
        "object",
        0.08280939275679769
      ],
      [
        "reluctance",
        0.08280939275679769
      ],
      [
        "forms does n\u2019t",
        0.09827342448325681
      ],
      [
        "n\u2019t pay",
        0.09827342448325681
      ],
      [
        "pull the launching",
        0.09827342448325681
      ]
    ]
  },
  {
    "utterance number": 110,
    "timestamp": "2023-03-22",
    "speaker": "KG",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Only two",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 2,
        "text": " Race doesn\u2019t make sense here",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": " It\u2019s only the things that return lists",
        "polarity": 0.0,
        "subjectivity": 1.0
      },
      {
        "sentence number": 4,
        "text": " That\u2019s all in all settled",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 1.0,
    "keywords": [
      [
        "Race does n\u2019t",
        0.23338172234549467
      ],
      [
        "n\u2019t make sense",
        0.2761132692819263
      ],
      [
        "n\u2019t make",
        0.35350894161299157
      ],
      [
        "make sense",
        0.35350894161299157
      ],
      [
        "Race",
        0.3702539456099092
      ],
      [
        "return lists",
        0.38599679376725615
      ],
      [
        "lists",
        0.4613789858464135
      ],
      [
        "n\u2019t",
        0.5110573480904945
      ],
      [
        "make",
        0.5110573480904945
      ],
      [
        "sense",
        0.5110573480904945
      ]
    ]
  },
  {
    "utterance number": 111,
    "timestamp": "2023-03-22",
    "speaker": "MM",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Okay",
        "polarity": 0.5,
        "subjectivity": 0.5
      },
      {
        "sentence number": 2,
        "text": " That helps",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 3,
        "text": "",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.5,
    "subjectivity": 0.5,
    "keywords": []
  },
  {
    "utterance number": 112,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Thanks, Mark, your reluctance is registered and won\u2019t be ignored during Stage 1",
        "polarity": 0.2,
        "subjectivity": 0.2
      }
    ],
    "polarity": 0.2,
    "subjectivity": 0.2,
    "keywords": [
      [
        "Mark",
        0.030396371632413578
      ],
      [
        "Stage",
        0.08596317751626563
      ],
      [
        "reluctance is registered",
        0.09700399286574239
      ],
      [
        "reluctance",
        0.29736558256021506
      ],
      [
        "registered",
        0.29736558256021506
      ],
      [
        "n\u2019t",
        0.29736558256021506
      ]
    ]
  },
  {
    "utterance number": 113,
    "timestamp": "2023-03-22",
    "speaker": "JRL",
    "sentences": [
      {
        "sentence number": 1,
        "text": " I think you have several explicit supports and no one objecting",
        "polarity": 0.0,
        "subjectivity": 0.0
      },
      {
        "sentence number": 2,
        "text": " I think you have Stage 1",
        "polarity": 0.0,
        "subjectivity": 0.0
      }
    ],
    "polarity": 0.0,
    "subjectivity": 0.0,
    "keywords": [
      [
        "explicit supports",
        0.04188746641162499
      ],
      [
        "objecting",
        0.12363091320521931
      ],
      [
        "Stage",
        0.19677146788549632
      ],
      [
        "explicit",
        0.2005079697193566
      ],
      [
        "supports",
        0.2005079697193566
      ]
    ]
  },
  {
    "utterance number": 114,
    "timestamp": "2023-03-22",
    "speaker": "ACE",
    "sentences": [
      {
        "sentence number": 1,
        "text": " Thank you very much",
        "polarity": 0.26,
        "subjectivity": 0.26
      }
    ],
    "polarity": 0.26,
    "subjectivity": 0.26,
    "keywords": []
  }
]